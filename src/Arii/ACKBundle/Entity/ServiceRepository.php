<?php

namespace Arii\ACKBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{

    public function listStates($ok,$warning,$critical) {        
        $q = $this
        ->createQueryBuilder('e')
        ->select('e.id,e.host_name,e.title,e.description,e.state,e.state_time')
        ->orderBy('e.state_time','DESC');
        if ($ok)
            $q->orWhere("e.state = 'OK'");
        if ($warning)
            $q->orWhere("e.state = 'WARNING'");
        if ($critical)
            $q->orWhere("e.state = 'CRITICAL'");
        return $q->getQuery()->getResult();
    }
    
    public function listAll() {        
        $q = $this
        ->createQueryBuilder('e')
        ->select('e.id,e.name,e.title,e.obj_type,e.description')
        ->orderBy('e.name,e.obj_type','DESC')
        ->getQuery();
        return $q->getResult();
    }

    public function purge($date, $state='CLOSE') {        
        $q = $this
        ->createQueryBuilder('e')
        ->update()
        ->set('e.state', $state)
        ->where('e.state <> :state')
        ->andWhere('e.state_time < :date')
        ->setParameter('date', $date)
        ->setParameter('state', $state)
        ->getQuery();
        return $q->getResult();
    }

    public function Service($id) {
        
        $q = $this
        ->createQueryBuilder('e')
        ->select("e.id","e.name","e.title","e.description","e.host_name","e.status","e.state_time","e.state_information",
                "e.acknowledged","e.downtimes","e.downtimes_info","e.downtimes_user","e.status_time",
                "e.last_state_change","e.last_time_up","e.last_time_down","e.last_time_unreachable","e.latency")
        ->where('e.id = :id')
        ->setParameter('id', $id)
        ->getQuery();

        return $q->getResult();
    }    

    public function getNb() {
        return $this->createQueryBuilder('e')
            ->select('COUNT(e)')
            ->where("e.state = 'CRITICAL'")
            ->getQuery()
            ->getSingleScalarResult();
    }

    
}
