{% extends "AriiACKBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
var State = {"OK": 0, "WARNING": 1, "CRITICAL": 1}

function Init() {
    mySidebar.items('services').setActive();

    myLayout = globalLayout.cells("b").attachLayout('3L');
    myLayout.cells("a").setText("{{ "Services" | trans }}");

    myToolbar = myLayout.cells("a").attachToolbar();
    myToolbar.setIconsPath("{{ asset('/images/') }}");
    myToolbar.loadStruct("{{ url('xml_ACK_services_toolbar') }}");
    myToolbar.attachEvent("onStateChange", function (id,state) {
        State[id] = state;
        PageRefresh();        
    });
            
    myGrid = myLayout.cells("a").attachGrid();
    myGrid.setImagePath( "{{ asset('/') }}");
    myGrid.setHeader("{{ "Host" | trans }},{{ "Name" | trans }},{{ "Description" | trans }},{{ "Status" | trans }},{{ "Time" | trans }},{{ "Sync." | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#select_filter,#text_filter,#master_checkbox");
    myGrid.setInitWidths("100,150,*,100,160,70");
    myGrid.setColAlign("left,left,left,center,right,center");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ch");
    myGrid.setColSorting("str,str,str,str,date,int");
    myGrid.enableAlterCss("even_row","odd_row");   
//    myGrid.enableDragAndDrop(true);    
    myGrid.init();
    myGrid.attachEvent("onRowDblClicked", function (rid) {
        EditService(rid);
    });
    myGrid.attachEvent("onDrag", function(sId,tId,sObj,tObj,sInd,tInd){
        changeState(sId,sObj,tObj);
    });
    myGrid.attachEvent("onCheck", function(sId,tId,sObj){
        changeProbe(sId,tId,sObj);
    });
    

    formData = [
        { type: "settings", position: "label-left", labelWidth: 80, inputWidth: 250, labelAlign: "right", readonly: 1, position: "label-left" },
        { type: "hidden", name: 'id' },       
        {   type: "block",
            inputWidth: "auto",
            list: [    
                {type: "input", name: 'name', label:'{{ 'Name' | trans }}', required: true },
                {type: "input", name: 'title', label:'{{ 'Title' | trans }}' },
                {type: "input", name: 'description', label:'{{ 'Description' | trans }}', rows: 4 },
                {type: "input", name: 'host_name', label:'{{ 'Host' | trans }}' },
                {type: "input", name: 'state', label:'{{ 'Statut' | trans }}' },
                {type: "input", name: 'state_time', label:'{{ 'State time' | trans }}' },
                {type: "input", name: 'state_information', label:'{{ 'Information' | trans }}', rows: 2 },
                {type: "checkbox", name: 'acknowledged', label:'{{ 'Acknowledged' | trans }}' },
                {type: "checkbox", name: 'synchronised', label:'{{ 'Synchronised' | trans }}' },
                {type: "input", name: 'probe_id', label:'{{ 'ProbeId' | trans }}' },
                {type: "newcolumn" },
                {type: "input", name: 'downtimes', label:'{{ 'Downtimes' | trans }}' },
                {type: "input", name: 'downtimes_info', label:'{{ 'Downtimes Info' | trans }}' },
                {type: "input", name: 'downtimes_user', label:'{{ 'Downtimes User' | trans }}' },
                {type: "input", name: 'status_time', label:'{{ 'Status time' | trans }}', dateFormat: "%Y-%m-%d %H:%i", enableTime: "true" },
                {type: "input", name: 'last_state_change', label:'{{ 'Last state change' | trans }}', dateFormat: "%Y-%m-%d %H:%i", enableTime: "true" },
                {type: "input", name: 'last_time_up', label:'{{ 'Last time up' | trans }}', dateFormat: "%Y-%m-%d %H:%i", enableTime: "true" },
                {type: "input", name: 'last_time_down', label:'{{ 'Last time down' | trans }}', dateFormat: "%Y-%m-%d %H:%i", enableTime: "true" },
                {type: "input", name: 'last_time_unreachable', label:'{{ 'Last time unreachable' | trans }}', dateFormat: "%Y-%m-%d %H:%i", enableTime: "true" },
                {type: "input", name: 'latency', label:'{{ 'Latency' | trans }}' },
            ]
        }
   ];
   myForm = myLayout.cells("b").attachForm(formData);     
   myLayout.cells("b").setText("{{ "Detail" | trans }}");

   myLayout.cells("c").setText("{{ "Probe" | trans }}");
   myLayout.cells("c").setHeight(300);
   myLayout.cells("c").collapse();
    formData2 = [
        { type: "settings", position: "label-left", labelWidth: 80, inputWidth: 250, labelAlign: "right", readonly: 1, position: "label-left" },
        { type: "hidden", name: 'id' },       
        {   type: "block",
            inputWidth: "auto",
            list: [    
                {type: "input", name: 'name', label:'{{ 'Name' | trans }}', required: true },
                {type: "input", name: 'title', label:'{{ 'Title' | trans }}' },
                {type: "input", name: 'description', label:'{{ 'Description' | trans }}', rows: 4 },
                {type: "input", name: 'host_name', label:'{{ 'Host' | trans }}' },
                {type: "input", name: 'state', label:'{{ 'Statut' | trans }}' },
                {type: "input", name: 'state_time', label:'{{ 'State time' | trans }}' },
                {type: "input", name: 'state_information', label:'{{ 'Information' | trans }}', rows: 2 },
                {type: "checkbox", name: 'acknowledged', label:'{{ 'Acknowledged' | trans }}' },
            ]
        }
   ];
   myForm2 = myLayout.cells("c").attachForm(formData2);     
       
   PageRefresh();
}

function PageRefresh() {
    var s = "";
    for (var i in State) {
       s += State[i] + "|";
    }
    myGrid.load( "{{ url('xml_ACK_services_grid') }}?state="+s, function() {
        myGrid.refreshFilters();
        myGrid.filterByAll();
    });
}

function changeProbe(id,col,value) {
//    var probeId=myGrid.getValue(id,col);
    // Envoi de l'information de synchro
    dhx4.ajax.get( "{{ url('json_ACK_service_sync') }}?id="+id+"&value="+(value?1:0), function(r1) {  
/*
        t = dhx4.s2j(r1.xmlDoc.responseText);
        if (t['count']>0) 
            mySidebar.cells("queued").setBubble(t['count']);
        else
            mySidebar.cells("queued").clearBubble();     
*/
        EditService(id);
    });
}

function EditService (id) {
    myLayout.cells('b').progressOn();
    // Probe ou non ?
    if (myGrid.cells(id,5).getValue()==='0') {
        myLayout.cells('c').collapse();
    }
    else {
        myLayout.cells('c').expand();
    }
    myForm.load("{{ url('xml_ACK_service_form') }}?id="+id,function(){
        myLayout.cells('b').progressOff();
        // Sonde synchronis√©e ?
        if (myForm.getItemValue('synchronised')) {      
            myLayout.cells('c').expand();
            myLayout.cells('c').progressOn();
            myForm2.load("{{ url('xml_ACK_probe_form') }}?id="+myForm.getItemValue('probe_id'),function(){
                myLayout.cells('c').progressOff();
            });
        }
        else {
            myLayout.cells('c').collapse();
        }
    });
}
</script>
{% endblock %}