{# src/Arii/CoreBundle/Resources/views/index.html.twig #}
{% extends "AriiAdminBundle::layout.html.twig" %}
{% block body %}
<script>
dhtmlxEvent(window,"load",function(){ 
var size=300;

    globalLayout = new dhtmlXLayoutObject(document.body,"3L");
    globalLayout.cells("a").setWidth(size);
    globalLayout.cells("b").hideHeader();
    globalLayout.cells("c").hideHeader();
    globalLayout.cells("c").setHeight(250); 
    
    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_Admin_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
    
    mySidebar = globalLayout.cells("a").attachSidebar({
        {% include "AriiAdminBundle:Default:menu.html.twig" %}        
    });
    mySidebar.attachEvent("onSelect", function(id, value){
        document.location.href = "{{ url('arii_Admin_index') }}"+id;
    });
    globalLayout.cells("a").hideHeader();    
/*
    myTeam = globalLayout.cells("a").attachTree();
    myTeam.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    myTeam.load( "{{ url('xml_Admin_teams_tree') }}" );
*/            
    formData = [
       { type: "settings", position: "label-left", labelWidth: 100, inputWidth: 240, labelAlign: "right", readonly: 1, position: "label-left" },
             {type:"hidden", name: 'id' },
            {type:"input", name: 'name', label:'{{ 'Name' | trans }}', required: true },
            {type:"input", name: 'description', label:'{{ 'Description' | trans }}', rows: 4},
            {type:"select", name: 'type', label:'{{ 'Type' | trans }}', options:[
                {text: "Public", value: "0"},
                {text: "User",   value: "1"},
                {text: "Admin",  value: "2"}
            ] },
            {type:"input", name: 'owner', label:'{{ 'Owner' | trans }}', readonly: true },
            {type:"newcolumn"},
            {type:"input", name: 'env', label:'{{ 'Env' | trans }}', value: '*' },
            {type:"input", name: 'spooler', label:'{{ 'Spooler' | trans }}', value: '*' },
            {type:"input", name: 'job_name', label:'{{ 'Job' | trans }}', value: '*' },
            {type:"input", name: 'job_chain', label:'{{ 'Chain' | trans }}', value: '*' },
            {type:"input", name: 'order_id', label:'{{ 'Order' | trans }}', value: '*' },
            {type:"input", name: 'status', label:'{{ 'Status' | trans }}', value: '*'}
        ];
    
    myForm = globalLayout.cells("c").attachForm(formData);
    myForm.enableLiveValidation(true);
    
    myFormToolbar = globalLayout.cells("c").attachToolbar();
    myFormToolbar.setIconsPath("{{ asset('/bundles/ariicore/images/toolbar/') }}");
    myFormToolbar.loadStruct("{{ url('xml_Admin_filter_toolbar') }}");
    
/*
    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/wa/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{ { url('xml_filter_menu') }}");
*/
    myStatus = globalLayout.cells("b").attachStatusBar({
        text:   "",   // status bar text
        height: 35                  // custom height
    });
    
    myGrid = globalLayout.cells("b").attachGrid();
    myGrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
    myGrid.setHeader("{{ "Nom" | trans }},{{ "Filter" | trans }},{{ "Env" | trans }},{{ "Job" | trans }},{{ "Chain" | trans }},{{ "Trigger" | trans }},{{ "Status" | trans }},{{ "Type" | trans }},{{ "owner" }}");
    myGrid.attachHeader("#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter,#numeric_filter,#select_filter");
    myGrid.setInitWidths("200,*,80,*,*,*,120,80,100");
    myGrid.setColAlign("left,left,left,left,left,left,left,right,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.setColSorting("str,str,str,str,str,str,str,str,str");
//    myGrid.enableContextMenu(myGridMenu);
    myGrid.init();
    myGrid.load( "{{ url('xml_Admin_filters_grid') }}", function () {
        myStatus.setText("{{ "Filters" | trans }}"+": "+myGrid.getRowsNum());
    });
    myGrid.attachEvent("onRowDblClicked", function (rid) {
        EditFilter(rid);
    });
    
    myFormToolbar.attachEvent("onClick", function(id){
        switch (id) {
            case 'delete_filter':
                filter = myForm.getItemValue('id');
                DeleteFilter(filter);
                break;
            case 'save_filter':
                globalLayout.progressOn();
                if(!myForm.validate())
                {
                    dhtmlx.message({
                        title:"Error",
                        type: "error",
                        lifetime: "60000",
                        text: "{{ "Please type in all the required fields!" | trans }}"
                     });
                    return;
                }
                myForm.send("{{ url('xml_Admin_filter_save') }}","POST",function(loader,response){
                   if(response === "success")
                   {
                     dhtmlx.message({
                        title:"{{ "Save" | trans }}",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Filter saved" | trans }}"
                     });
                    myGrid.clearAll();
                    myGrid.load("{{ url('xml_Admin_filters_grid') }}");
                   }
                   else 
                   {
                     dhtmlx.message({
                        title:"{{ "Save" | trans }}",
                        type: "error",
                        lifetime: "60000",
                        text: response
                     });
                   }
                    globalLayout.progressOff();
                });
                break;
            default:
                alert(id);
            }
    });
/*
    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        spooler = myGrid.cells(rId,0).getValue();
        switch (menuitemId) {
           case "add_filter":
                NewFilter();
                break;
            case "delete_filter":
                myForm.setItemValue("id",'');
                DeleteFilter(rId);
                break;
            default:
                alert("inconnu ! "+menuitemId);    
        }
        return true;
    });
*/
});

function NewFilter() {
    myForm.clear();
    myForm.setItemFocus("name");
}

function EditFilter(id) {
    globalLayout.cells("b").progressOn();
    myForm.clear();
    myForm.load("{{ url('xml_Admin_filter_form') }}?id="+id, function () {
        globalLayout.cells("b").progressOff();
    });
}

function DeleteFilter(id) {
    // On edite pour sauvegarder
    globalLayout.cells("b").progressOn();
    EditFilter(id);
    dhtmlx.confirm({
     title: "{{ "Delete filter" | trans }}",
     type: "confirm-error",
     text: '{{ "Do you confirm the suppression ?" | trans }}',
     callback: function(answer) { if (answer) {
               myForm.send("{{ url('xml_Admin_filter_delete') }}","POST",function(loader,response){
               if(response === "success")
               {
                 dhtmlx.message({
                    title:"{{ "Save" | trans }}",
                    type: "Notice",
                    lifetime: "60000",
                    text: "{{ "Filter deleted" | trans }}"
                 });
               }
               else 
               {
                 dhtmlx.message({
                    title:"{{ "Delete" | trans }}",
                    type: "error",
                    lifetime: "60000",
                    text: response
                 });
               }
                    myGrid.deleteRow(id);
                    globalLayout.cells("b").progressOff();
                })
        }
    },
     cancel: "{{ "No" | trans }}",
     ok: "{{ "Yes" | trans }}" });
 }
 
function GlobalRefresh() {
}
</script>
{% endblock %}
