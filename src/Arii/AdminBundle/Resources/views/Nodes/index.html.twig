{% extends "AriiAdminBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
dhtmlxEvent(window,"load",function(){
var size=300;

    globalLayout = new dhtmlXLayoutObject(document.body,"4L");  
    globalLayout.cells("a").setWidth(size); 
    globalLayout.cells("b").setWidth(300); 
    globalLayout.cells("d").hideHeader(); 
    globalLayout.cells("b").setText("{{ "Category" | trans }}");  
    globalLayout.cells("c").hideHeader(); 
    globalLayout.cells("d").hideHeader(); 
    globalLayout.cells("d").setHeight(400); 
    
    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_Admin_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );

    mySidebar = globalLayout.cells("a").attachSidebar({
        {% include "AriiAdminBundle:Default:menu.html.twig" %}        
    });
    mySidebar.attachEvent("onBubbleClick", function(id, value){
        // bubble clicked, your code here
        // 'return true' means item allowed to be selected
        // false - otherwise
        return true;
    });
    mySidebar.attachEvent("onSelect", function(id, value){
        document.location.href = "{{ url('arii_Admin_index') }}"+id;
        return true;
    });
    globalLayout.cells("a").hideHeader(); 

    myTab = globalLayout.cells("c").attachTabbar();
    myTab.addTab("nodes","{{ "Nodes" | trans }}","100px", null, true);
    myTab.addTab("connections","{{ "Connections" | trans }}","100px");
    myTab.addTab("schema","{{ "Schema" | trans }}","100px");

    myGrid = myTab.cells("nodes").attachGrid();
    myGrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
    myGrid.setHeader("{{ "Category" | trans }},{{ "Node" | trans }},{{ "Description" | trans }},{{ "Component" | trans }},{{ "Vendor" | trans }},{{ "Status" | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#select_filter,#select_filter,#select_filter");
    myGrid.setInitWidths("200,200,*,200,200,0");
    myGrid.setColAlign("left,left,left,left,left,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro");
    myGrid.setColSorting("str,str,str,str,str,str");
    myGrid.enableAlterCss("","");
    myGrid.init();
    myGrid.load( "{{ url('xml_Admin_nodes_grid') }}");

    myTree = globalLayout.cells("b").attachTree();
    myTree.setImagesPath("{{ asset('bundles/ariicore/images/tree/') }}");
    myTree.load( "{{ url('xml_Admin_categories_tree') }}" );
    myTree.enableDragAndDrop(true, false);
    myTree.attachEvent("onClick",function(id){
        globalLayout.cells("c").progressOn();
        myGrid.load("{{ url('xml_Admin_connections_grid') }}?category="+id, function() {
            globalLayout.cells("c").progressOff();
        });
    })

    formData = [
        { type: "settings", position: "label-left", labelWidth: 150, inputWidth: 200,labelAlign: "right" },
        {type: "hidden",name: "id"},
        { type: "input",
          name: "name",
          label: "{{ "Name"| trans }}",
          required: true
        },
        { type: "input",
          name: "title",
          label: "{{ "Title"| trans }}"
        },
        { type: "input",
          name: "description",
          label: "{{ "Description" | trans }}",
          rows: 3
        },        
        {
          type: "select",
          name: "component",
          label: "{{ "Component" | trans}}",
          connector: "{{ url('xml_Admin_components_select') }}"
        },
        {
          type: "select",
          name: "vendor",
          label: "{{ "Vendor" | trans}}"
        },
        {
          type: "select",
          name: "category_id",
          label: "{{ "Category" | trans}}",
          connector: "{{ url('xml_Admin_categories_select') }}"
        },      
        {
          type: "select",
          name: "site_id",
          label: "{{ "Site" | trans}}",
          connector: "{{ url('xml_Admin_sites_select') }}"
        },
        {type: "hidden", name: "connections"}
    ];

    nodeLayout = globalLayout.cells("d").attachLayout("2U");
    nodeLayout.cells("a").hideHeader(); 
    nodeLayout.cells("b").hideHeader(); 
    nodeLayout.cells("a").setWidth(450); 

    myFormToolbar = nodeLayout.cells("a").attachToolbar();
    myFormToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myFormToolbar.loadStruct("{{ url('xml_Admin_node_toolbar') }}", function () {
    });    
    
    myForm = nodeLayout.cells("a").attachForm(formData);
    
    myForm.attachEvent("onChange", function(select, value) {
        if (select !== 'component')
            return true;
        this.reloadOptions("vendor", "{{ url('xml_Admin_vendors_select') }}?component="+value);
        return true;
    });

    myNodeConn = nodeLayout.cells("b").attachGrid();
    myNodeConn.setHeader("{{ "Title"| trans }},{{ "Type"| trans }},{{ "Description"| trans }},{{ "Host"| trans }},{{ "Protocol"| trans }},{{ "Login"| trans }},{{ "Env"| trans }}");
    myNodeConn.attachHeader("#text_filter,#select_filter,#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    myNodeConn.setInitWidths("200,200,*,200,150,80,80");
    myNodeConn.setColAlign("left,left,left,left,left,right,center");
    myNodeConn.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myNodeConn.enableMultiselect(true);  
    myNodeConn.enableDragAndDrop(true);
    myNodeConn.init();

    myConnToolbar = nodeLayout.cells("b").attachToolbar();
    myConnToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myConnToolbar.loadStruct("{{ url('xml_Admin_node_toolbar2') }}", function () {
    });    
    
    myConnections = myTab.cells("connections").attachGrid();
    myConnections.setHeader("{{ "Name" | trans }},{{ "Title"| trans }},{{ "Type"| trans }},{{ "Description"| trans }},{{ "Host"| trans }},{{ "Protocol"| trans }},{{ "Login"| trans }},{{ "Env"| trans }}");
    myConnections.attachHeader("#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    myConnections.setInitWidths("0,200,200,*,200,150,80,80");
    myConnections.setColAlign("left,left,left,left,left,left,right,center");
    myConnections.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro,ro");
//    myConnections.enableLightMouseNavigation( true );   
    myConnections.load( "{{ url('xml_Admin_connections_grid') }}" );
    myConnections.enableDragAndDrop(true);
    myConnections.init();

    myGrid.attachEvent("onRowDblClicked", function(id) {
        globalLayout.cells("d").progressOn();
        myForm.load("{{ url('xml_Admin_node_form') }}?id="+id, function () {
                myForm.reloadOptions('vendor',"{{ url('xml_Admin_vendors_select') }}?component="+myForm.getItemValue('component'));
                myNodeConn.load("{{ url('xml_Admin_node_connections_grid') }}?id="+id, function() {
                globalLayout.cells("d").progressOff();            
            } );
        });
    } );

    myFormToolbar.attachEvent("onClick", function (id) {
        switch (id){
            case "add":
                myForm.clear();
                break;
            case "copy":
                myForm.setItemValue("id",'');
                dhtmlx.message({
                        title:"Copy",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Copy" | trans }}"
                     });
                
                break;
            case "delete":
                id = myForm.getItemValue("id");
                globalLayout.cells("c").progressOn();
                myForm.load("{{ url('xml_Admin_node_delete') }}?id="+id, function () {
                    dhtmlx.message({
                        title:"Save",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Node Deleted" | trans }}"
                     });
                    globalLayout.cells("c").progressOff();
                    GridRefresh();
                });
                break;
            case "save":
                if(!myForm.validate())
                {
                    dhtmlx.message({
                        title:"Error",
                        type: "error",
                        lifetime: "60000",
                        text: "{{ "Please type in all the required fields!" | trans }}"
                     });
                    return;
                }
                globalLayout.cells("c").progressOn();
                var params = new Array();
                
                for(i=0;i<myNodeConn.getRowsNum();i++) {
                    params.push(myNodeConn.getRowId(i));
                }
                var paramsStr = params.join(",");
                myForm.setItemValue("connections",paramsStr );
                
                myForm.send("{{ url('xml_Admin_node_save') }}","POST",function(loader,response){
                    if(loader.xmlDoc.responseText === "success")
                    {
                     dhtmlx.message({
                        title:"Save",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Node saved" | trans }}"
                     });
                     GridRefresh();
                   }
                   globalLayout.cells("c").progressOff();
                });
                break;
            default:
                alert(id);
                break;
        }
    });

    myConnToolbar.attachEvent("onClick", function (id) {
        switch (id){
            case "add":
                myTab.cells("connections").setActive();
                dhtmlx.message({
                        title:"{{ "Add connections" | trans }}",
                        type: "Notice",
                        lifetime: "60000",
                        text: "{{ "Drag&Drop connections." | trans }}"
                     });
                break;
            case "delete":
                myNodeConn.deleteSelectedRows();
                break;
        }
    });

    myForm.attachEvent("onChange", function(name, value){
        if (name != 'component') return false;        
        // on recharge 
        myForm.reloadOptions('vendor',"{{ url('xml_Admin_vendors_select') }}?"+name+"="+value);
    });
    
    myTab.cells("schema").attachURL( "{{ url('html_Admin_nodes_schema') }}");
});

function GridRefresh()
{
    globalLayout.cells("a").progressOn();
    myGrid.load( "{{ url('xml_Admin_nodes_grid') }}", function() {
        globalLayout.cells("a").progressOff();        
    });
}

function DeleteNode(id) {
        dhtmlx.confirm({
        title: "{{ "Delete node" | trans }}",
        type: "confirm-error",
        text: "{{ "node.message.delete" | trans }}",
        callback: function(answer) { if (answer) {
                globalLayout.cells("a").progressOn();
                dhtmlxAjax.get("{{ url('xml_Admin_node_delete') }}?id="+id,function(loader){
                    if(loader.xmlDoc.responseText === 'success')
                    {
                        dhtmlx.message({
                            title:"Save",
                            type: "Notice",
                            lifetime: "60000",
                            text: "{{ "Node Deleted" | trans }}"
                         });
                        GridRefresh();
                        if(myForm.getItemValue("id")===id) // when we are editting the node, and we delete the node in the grid, we need to clear the form also.
                        {
                            myForm.clear();
                        }
                        globalLayout.cells("a").progressOff(); 
                    } else
                    {
                        dhtmlx.message({
                            title:"Error",
                            type: "error",
                            lifetime: "60000",
                            text: loader.xmlDoc.responseText
                         });
                        globalLayout.cells("a").progressOff(); 
                    }
                });
            }
        },
        cancel: "{{ "No" | trans }}",
        ok: "{{ "Yes" | trans }}" });
}

</script>
{% endblock %}
