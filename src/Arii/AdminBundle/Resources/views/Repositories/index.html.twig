{% extends "AriiAdminBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
function Init() {
 
    myLayout = globalLayout.cells("b").attachLayout("3L");  
    myLayout.cells("a").setWidth(300);
    myLayout.cells("a").setText("{{ "Categories" | trans }}");
    
    myGrid = myLayout.cells("b").attachGrid();
    myGrid.selMultiRows = true;
    myGrid.setImagePath("{{ asset('arii/images/treegrid/') }}");
    myGrid.setHeader("{{ "Name"| trans }},{{ "Type"| trans }},{{ "Role"| trans }},{{ "Description"| trans }},{{ "Driver"| trans }},{{ "DB"| trans }},{{ "Connection"| trans }},{{ "Login"| trans }}");
    myGrid.attachHeader("#text_filter,#select_filter,#select_filter,#text_filter,#text_filter,#select_filter,#text_filter,#text_filter");
    myGrid.setInitWidths("200,100,200,*,100,200,200,150");
    myGrid.setColAlign("left,left,left,left,left,left,left,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.load("{{ url('xml_Admin_repositories_grid') }}");
    myGrid.init();

    myGrid.attachEvent("onRowDblClicked", function (rid) {
        EditRepository(rid);
    });

    formData = [
        { type: "settings", position: "label-left", labelWidth: 100, inputWidth: 250,labelAlign: "right" },
        {
            type: "hidden",
            name: "ID"
        },
        {
            type: "input",
            name: "NAME",
            label: "{{ "Name" | trans }}",
            required: true
        },
        {
            type: "input",
            name: "TYPE",
            label: "{{ "Type" | trans }}",
            required: true
        },
        {
            type: "input",
            name: "ROLE",
            label: "{{ "Role" | trans }}"
        },
        {
            type: "input",
            name: "DESCRIPTION",
            label: "{{ "Description" | trans }}",
            rows: 3
        },
        {   type: "newcolumn" },
        {
          type: "select",
          name: "CONNECTION_ID",
          label: "{{ "Connection" | trans}}",
          connector: "{{ url('xml_Admin_connections_select') }}"
        },        
        {
            type: "input",
            name: "DRIVER",
            label: "{{ "Driver" | trans }}"
        },
        {
            type: "input",
            name: "DBNAME",
            label: "{{ "Database" | trans }}"
        }     
    ];
    myForm = myLayout.cells("c").attachForm(formData);
    myForm.enableLiveValidation(true);
    {%if id != '' %}
    myForm.load("{{ url('xml_Admin_repository_form') }}?id="+"{{ id }}" );
    {%endif%}
}
        
function onClick(id){
    switch (id){
        case "add_repository":
            NewRepository();
            break;
        case "delete_repository":
            id = myForm.getItemValue("id");
            DeleteRepository(id);
            break;
        case "save_repository":
            if(!myForm.validate())
            {
                dhtmlx.message({
                    title:"Error",
                    type: "error",
                    lifetime: "60000",
                    text: "{{ "Please type in all the required fields!" | trans }}"
                 });
                return;
            }
            myForm.send("{{ url('xml_Admin_repository_save') }}","POST",function(loader,response){
               if(response === "success")
               {
                 dhtmlx.message({
                    title:"{{ "Save" | trans }}",
                    type: "Notice",
                    lifetime: "60000",
                    text: "{{ "Repository saved" | trans }}"
                 });
                 GridRefresh();
               }
               else 
               {
                 dhtmlx.message({
                    title:"{{ "Save" | trans }}",
                    type: "error",
                    lifetime: "60000",
                    text: response
                 });
               }
            });
        break;
        default:
            break;
    }
}

function onMenuClick(menuitemId, type)
{
    var rid = myGrid.contextID.split("_")[0];
    switch(menuitemId){
        case "add_repository":
            NewRepository();
            break;
        case "edit_repository":
            EditRepository(rid);
            break;
        case "delete_repository":
            DeleteRepository(rid);
            break;
        break;
        default:
            alert(menuitemId);
    }
    return true;
}

function GridRefresh()
{
    myGrid.clearAll();
    myGrid.load("{{ url('xml_Admin_repositories_grid') }}");
}

function NewRepository() {
    myForm.clear();
    myForm.setItemFocus("name");
    myForm.setItemLabel("fieldset","{{ "New repository" | trans }}");
}

function EditRepository(id) {
    globalLayout.cells("c").progressOn();
    myForm.setItemLabel("fieldset","{{ "Edit repository" | trans }}");
    myForm.clear();
    myForm.load("{{ url('xml_Admin_repository_form') }}?id="+id, function () {
        globalLayout.cells("c").progressOff();
    });
}

function DeleteRepository(id) {
        dhtmlx.confirm({
        title: "{{ "Delete database" | trans }}",
        type: "confirm-error",
        text: "{{ "database.message.delete" | trans }}",
        callback: function(answer) { if (answer) {
                globalLayout.cells("a").progressOn();
                alert("{{ url('xml_Admin_repository_delete') }}?id="+id);
                dhx4.ajax.get("{{ url('xml_Admin_repository_delete') }}?id="+id,function(loader){
                    if(loader.xmlDoc.responseText === 'success')
                    {
                        dhtmlx.message({
                            title:"Save",
                            type: "Notice",
                            lifetime: "60000",
                            text: "{{ "Repository deleted" | trans }}"
                         });
                        GridRefresh();
                        if(myForm.getItemValue("id")===id) // when we are editting the spooler, and we delete the spooler in the grid, we need to clear the form also.
                        {
                            myForm.clear();
                        }
                        globalLayout.cells("b").progressOff(); 
                    } else
                    {
                        dhtmlx.message({
                            title:"Error",
                            type: "error",
                            lifetime: "60000",
                            text: loader.xmlDoc.responseText
                         });
                        globalLayout.cells("b").progressOff(); 
                    }
                });
            }
        },
        cancel: "{{ "No" | trans }}",
        ok: "{{ "Yes" | trans }}" });
}

 function GlobalRefresh() { }
</script>

{% endblock %}
