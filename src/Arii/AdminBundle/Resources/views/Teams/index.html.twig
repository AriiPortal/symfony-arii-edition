{# src/Arii/AdminBundle/Resources/views/Teams/index.html.twig #}
{% extends "AriiAdminBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
function Init() {
    
    myLayout = globalLayout.cells("b").attachLayout("3L"); 
    myLayout.cells("a").setWidth(400);

    myTabbar = myLayout.cells("a").attachTabbar();
    myTabbar.addTab("teams","{{ "Teams" | trans }}","100px", null, true);
    myTabbar.addTab("users","{{ "Users" | trans }}","100px");
    myTabbar.addTab("filters","{{ "Filters" | trans }}","100px");
    
    myTeams = myTabbar.cells("teams").attachGrid();
    myTeams.setImagePath("{{ asset('arii/images/treegrid/') }}");
    myTeams.setHeader("{{ "Team" | trans }},{{ "Description" | trans }}");
    myTeams.attachHeader("#text_filter,#text_filter");
    myTeams.setInitWidths("200,*");
    myTeams.setColAlign("left,left");
    myTeams.setColTypes("ro,ro");
    myTeams.setColSorting("str,str");
    myTeams.enableDragAndDrop(true);
    myTeams.init();
    myTeams.load("{{ url('xml_Admin_teams_grid') }}");

    myTeams.attachEvent("onBeforeContextMenu",showMenu);

    myUsers = myTabbar.cells("users").attachGrid();
    myUsers.setImagePath("{{ asset('arii/images/treegrid/') }}");
    myUsers.setHeader("{{ "User" | trans }},{{ "Description" | trans }}");
    myUsers.attachHeader("#text_filter,#text_filter");
    myUsers.setInitWidths("200,*");
    myUsers.setColAlign("left,left");
    myUsers.setColTypes("ro,ro");
    myUsers.setColSorting("str,str");
    myUsers.enableDragAndDrop(true);
    myUsers.init();
    myUsers.load("{{ url('xml_Admin_users_grid') }}");

    myFilters = myTabbar.cells("filters").attachGrid();
    myFilters.setImagePath("{{ asset('arii/images/treegrid/') }}");
    myFilters.setHeader("{{ "Filter" | trans }},{{ "Description" | trans }}");
    myFilters.attachHeader("#text_filter,#text_filter");
    myFilters.setInitWidths("200,*");
    myFilters.setColAlign("left,left");
    myFilters.setColTypes("ro,ro");
    myFilters.setColSorting("str,str");
    myFilters.enableDragAndDrop(true);
    myFilters.init();
    myFilters.load("{{ url('xml_Admin_filters_grid') }}");

    myLayout = myLayout.cells("b").attachLayout("3U");  
    myLayout.cells("a").hideHeader(); 
    myLayout.cells("a").setWidth(400); 
    myLayout.cells("a").setText("{"); 
    myLayout.cells("b").hideHeader(); 
    
    globalToolbar = myLayout.cells("a").attachToolbar();
    globalToolbar.setIconsPath("{{ asset('arii/images/toolbar/') }}");
    globalToolbar.loadStruct("{{ url('xml_Admin_team_toolbar') }}");
    globalToolbar.attachEvent("onClick",onClickToolbar2);

    formData = [
        { type: "settings", position: "label-left", labelWidth: 80, inputWidth: 250, noteWidth: 250},
        {
            type: "hidden",
            name: "ID"
        },
        {
            type: "input",
            name: "NAME",
            label: "{{ "Name" | trans }}",
            required: true
        },
        {
            type: "input",
            name: "DESCRIPTION",
            label: "{{ "Description" | trans }}",
            rows: 4
        }
    ];
    
    myForm = myLayout.cells("a").attachForm(formData);
    myForm.enableLiveValidation(true);

    usergrid = myLayout.cells("a").attachGrid();

    usergrid.setImagePath("{{ asset('arii/images/treegrid/') }}");
    usergrid.setHeader("team_id,{{ "Title" | trans }},desc,{{ "path" | trans }},{{ "Job" | trans }},{{ "Job chain" | trans }},{{ "Order" | trans }},{{ "Spooler" | trans }},{{ "Repository" | trans }},R,W,X");
    usergrid.attachHeader("&nbsp,#text_filter,&nbsp,#select_filter,#select_filter,#select_filter,#select_filter,#select_filter,#select_filter,#master_checkbox,#master_checkbox,#master_checkbox");
    usergrid.setInitWidths("0,*,0,150,150,150,150,150,0,40,40,40");
    usergrid.setColAlign("left,left,left,left,left,left,left,left,left,center,center,center");
    usergrid.setColTypes("ro,ed,ro,ed,ed,ed,ed,ed,ed,ch,ch,ch");
    usergrid.setColSorting("str,str,str,str,str,str,str,str,str,str,str,str");
    usergrid.init();

    rightgrid = myLayout.cells("b").attachGrid();

    rightgrid.setImagePath("{{ asset('arii/images/treegrid/') }}");
    rightgrid.setHeader("team_id,{{ "Title" | trans }},desc,{{ "path" | trans }},{{ "Job" | trans }},{{ "Job chain" | trans }},{{ "Order" | trans }},{{ "Spooler" | trans }},{{ "Repository" | trans }},R,W,X");
    rightgrid.attachHeader("&nbsp,#text_filter,&nbsp,#select_filter,#select_filter,#select_filter,#select_filter,#select_filter,#select_filter,#master_checkbox,#master_checkbox,#master_checkbox");
    rightgrid.setInitWidths("0,*,0,150,150,150,150,150,0,40,40,40");
    rightgrid.setColAlign("left,left,left,left,left,left,left,left,left,center,center,center");
    rightgrid.setColTypes("ro,ed,ro,ed,ed,ed,ed,ed,ed,ch,ch,ch");
    rightgrid.setColSorting("str,str,str,str,str,str,str,str,str,str,str,str");
    rightgrid.init();

    myTeams.attachEvent("onRowDblClicked",function(rid,cind){
        var ids = rid.split('');
        if (myTeams.getUserData(rid,"type")==="user")
        {
            var id = rid.substr(2);
            tabbar.setTabActive("b1");
            myLayout.cells("a").progressOn();
            myLayout.cells("b").progressOn();
             myForm.load("{{ url('xml_Admin_user_form') }}?id="+rid.substr(2), function () {
                myLayout.cells("a").progressOff();
                rightgrid.clearAll();
                rightgrid.load("{{ url('xml_Admin_rights') }}?team_id="+myTeams.getParentId(rid).substr(2), function () {
                    myLayout.cells("b").progressOff();
                });
            });
        }
        if (myTeams.getUserData(rid,"type")==="team")
        {
            var tid = rid.substr(2);
            tabbar.setTabActive("b2");
            myLayout.cells("a").progressOn();
            myLayout.cells("b").progressOn();
            teamForm.load("{{ url('xml_Admin_team_form') }}?id="+tid, function () {
                myLayout.cells("a").progressOff();
                rightgrid.clearAll();
                rightgrid.load("{{ url('xml_Admin_rights') }}?team_id="+tid, function () {
                    myLayout.cells("b").progressOff();
                });
            });
        }

    });
}   
    
function GridRefresh()
{
    myTeams.loadXML("{{ url('xml_Admin_teams_grid') }}");
}

function showMenu(id)
{
    menu.showItem('delete_user');
    menu.showItem('delete_team');
    menu.showItem('add_right');
    menu.showItem('edit_user');
    menu.showItem('edit_team');
    menu.showItem('add_user');
    menu.showItem('add_team');
    menu.showItem('sep');
    switch (myTeams.getUserData(id,"type")) {
        case 'user':
            menu.hideItem('delete_team');
            menu.hideItem('edit_team');
            menu.hideItem('add_team');
            menu.hideItem('sep');
            menu.hideItem('add_right');
            break;
        case 'team':
            menu.hideItem('delete_user');
            menu.hideItem('edit_user');
            break;
        case 'enterprise':
            menu.hideItem('delete_team');
            menu.hideItem('delete_user');
            menu.hideItem('add_right');
            menu.hideItem('edit_user');
            menu.hideItem('edit_team');
            menu.hideItem('sep');
            break;
        default:
            alert(id);
            break;
    }    
    return true;
}

function onMenuClick(menuitemId)
{
    var rid = myTeams.contextID.split("_")[0];
    var ids = rid.split("");
    switch (menuitemId)
    {
        case "delete_user":
            var uid = rid.substr(2);
            dhtmlx.confirm({
                title: "{{ "Delete User" | trans }}",
                type: "confirm-error",
                text: "{{ "Do you really want to delete this user ?" | trans }}",
                callback: function(answer) { 
                          if (answer){
                                myLayout.cells("a").progressOn();
                                dhtmlxAjax.get("{{ url('arii_Admin_user_delete') }}?id="+uid,function(loader){ 
                                GridRefresh();
                                myLayout.cells("a").progressOff();
                            });
                          }
                      },
                cancel: "{{ "No" | trans }}",
                ok: "{{ "Yes" | trans }}" });
        
        break;
        case "delete_team":
            var tid = rid.substr(2);
            if (myTeams.hasChildren(rid)===0)
            {
                dhtmlx.confirm({
                    title: "{{ "Delete Team" | trans }}",
                    type: "confirm-error",
                    text: "{{ "Do you really want to delete this team ?" | trans }}",
                    callback: function(answer) { 
                        if (answer){
                            myLayout.cells("a").progressOn();
                            dhtmlxAjax.get("{{ url('xml_Admin_team_delete') }}?id="+tid,function(loader){
                                GridRefresh();
                                myForm.unload();
                                myForm = tabbar.cells("b1").attachForm(formData);
                                myLayout.cells("a").progressOff();
                            });
                        }
                    },
                    cancel: "{{ "No" | trans }}",
                    ok: "{{ "Yes" | trans }}" });
            } else
            {
                alert("{{ "Team must be empty!" | trans }}");
            }
            
            break;
        case "add_right":
            if (myTeams.getUserData(rid,"type")==="user")
            {
                return false;
            } else if (myTeams.getUserData(rid,"type")==="team")
            {
                var team_id = rid.substr(2);
                var tname = myTeams.cells(rid,0).getValue();
                addRight(team_id,"{{ "Add permission for" | trans }} "+tname,-1 );
            }
            break;
        case "add_user":
            var team_id = rid.substr(2);
            tabbar.setTabActive("b1");
            myForm.clear();
            myForm.setItemFocus('username');
            myForm.setItemValue('team_id',team_id);
            break;
        case "add_team":
            tabbar.setTabActive("b2");
            teamForm.clear();
            teamForm.setItemFocus('name');
            break;
        case "edit_user":
            var id = rid.substr(2);
            tabbar.setTabActive("b1");
            myLayout.cells("a").progressOn();
            myForm.load("{{ url('xml_Admin_user_form') }}?id="+id, function () {
                myLayout.cells("a").progressOff();
            });
        break;
        case "edit_team":
            var tid = rid.substr(2);
            tabbar.setTabActive("b2");
            myLayout.cells("a").progressOn();
            teamForm.load("{{ url('xml_Admin_team_form') }}?id="+tid, function () {
                myLayout.cells("a").progressOff();
            });
        break;
        default:
            alert(id);
        break;
    }
   
    return true;
}

function onMenuClick2(menuitemId)
{
    var rid = rightgrid.contextID.split("_")[0];
    var tid = rightgrid.cells(rid,0).getValue();
    switch (menuitemId)
    {
        case "edit":
            addRight(tid,"{{ "Edit permission" | trans }}",rid);
        break;
        case "add":
            addRight(tid,"{{ "Add permission" | trans }}",-1);
        break;
        case "delete":
            rightgrid.deleteRow(rid);
        break;
        default:
            alert(menuitemId);
        break;
    }   
    return true;
}

var dhxWins = new dhtmlXWindows();
dhxWins.attachViewportTo(document.body);

function attachUserFilter(uid)
{
    alert(uid);
}

function addRight(tid,tname,id)
{
    var largeur = 720;  
    
    var msg = dhxWins.createWindow( "attachTeamFilter" ,(document.getElementById("wrapper").offsetWidth-700)/2, 200, largeur, 480 ); 
    if (id>-1) {
        msg.setText(tname);
    }
    else {
        msg.setText("{{ "Edit permission" | trans }}");
    }
    var winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
//    winLayout.cells("a").hideHeader();
    winLayout.cells("a").setHeight(300);
    
    var toolbar;
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('arii/images/toolbar/') }}");
    toolbar.loadXML("{{ url('xml_Admin_teamfilter_toolbar') }}");

    var formDataWin,myFormWin;
    formDataWin = [
       { type: "settings", position: "label-left", labelWidth: 120, inputWidth: 500, noteWidth: 300, offsetLeft: 10 },
       { type: "fieldset", name: "permission", label: "{{ "Permission" | trans }}", inputWidth: "auto", 
           list:[
            {type:"hidden", 
                name: 'id', 
                value: id
            },
            {type:"hidden", 
                name: 'team_id', 
                value: tid
            },
            {type:"input", 
                name: 'name', 
                label:'{{ 'Title' | trans }}', 
                required: true,
                value: ""
            },
            {type:"input", 
                name: 'description', 
                label:'{{ 'Description' | trans }}', 
                rows: 2,
                value: ""
            }
            ] },
       { type: "fieldset", name: "location", label: "{{ "Location" | trans }}", inputWidth: "auto", 
       list:[
            {type:"input", 
                name: 'path', 
                label:'{{ 'Path' | trans }}', 
                value: "*"
            },
            {type:"input", 
                name: 'spooler', 
                label: '{{ 'Spooler' | trans }}', 
                value: "*"
            },
            {type:"input", 
                name: 'repository', 
                label: '{{ 'Repository' | trans }}', 
                value: "*"
            }
            ] },            
       { type: "fieldset", name: "objects", label: "{{ "Objects" | trans }}", inputWidth: "auto", 
       list:[
            {type:"input", 
                name: 'job', 
                label:'{{ 'Job' | trans }}', 
                value: "*"
            },
            {type:"input", 
                name: 'job_chain', 
                label: '{{ 'Job chain' | trans }}', 
                value: "*"
            },
            {type:"input", 
                name: 'order_id', 
                label:'{{ 'Order' | trans }}', 
                value: "*"
            }
            ] },
        { type: "fieldset", name: "rights", label: "{{ "Rights" | trans }}", inputWidth: "auto", 
        list:[
            {type: "newcolumn"},
            {type:"checkbox", 
                offsetLeft: 150,
                name: 'read', 
                label: '{{ 'Right_R' | trans }}', 
                position: "label-right",
                checked: false
            },
            {type: "newcolumn"},
            {type: "checkbox", 
                name: 'write', 
                label: '{{ 'Right_W' | trans }}', 
                position: "label-right",
                checked: false
            },
            {type: "newcolumn"},
            {type:"checkbox", 
                name: 'execute', 
                label: '{{ 'Right_X' | trans }}', 
                position: "label-right",
                checked: false
            },
            // bug checkbox
            { type: "hidden", name: 'R', value: 0 },
            { type: "hidden", name: 'W', value: 0 },
            { type: "hidden", name: 'X', value: 0 }
            ] }
        ];
    // bug checkbox
    myFormWin = winLayout.cells("a").attachForm(formDataWin);
    myFormWin.setSkin("dhx_skyblue");
    myFormWin.enableLiveValidation(true);
    if (id>-1) {
        myFormWin.load("{{ url('xml_Admin_rights_form') }}?id="+id );
    }
    
    myFormWin.attachEvent("onXLE", function(){
        if (myFormWin.getItemValue("R")>0) 
            myFormWin.checkItem("read");
        if (myFormWin.getItemValue("W")>0) 
            myFormWin.checkItem("write");
        if (myFormWin.getItemValue("X")>0) 
            myFormWin.checkItem("execute");
    });
    
    var dpWin = new dataProcessor( "{{ url('xml_Admin_rights_form') }}" );
    dpWin.setUpdateMode("off");
    dpWin.init(myFormWin);

    dpWin.attachEvent("onAfterUpdate", function(){        
        rightgrid.clearAll();
        rightgrid.load("{{ url('xml_Admin_rights') }}?team_id="+tid );
        msg.close();
    });

    toolbar.attachEvent("onClick",function(buttonId){
        switch(buttonId){
        case "save_right":
            // probleme de checkbox
            if (myFormWin.isItemChecked("read")) 
                myFormWin.setItemValue("R",1);
            else 
                myFormWin.setItemValue("R",0);
            if (myFormWin.isItemChecked("write"))
                myFormWin.setItemValue("W",1);
            else 
                myFormWin.setItemValue("W",0);
            if (myFormWin.isItemChecked("execute"))            
                myFormWin.setItemValue("X",1);
            else 
                myFormWin.setItemValue("X",0);
            dpWin.sendData();
        break;
        default:
            alert(buttonId);
            break;
        }
        return true;
    });
/*    
    var filtergrid = winLayout.cells("a").attachGrid();
    filtergrid.setHeader("{{ "Title" | trans }},{{ "Job" | trans }},{{ "Job chain" | trans }},{{ "Order" | trans }}");
    filtergrid.attachHeader("#text_filter,#text_filter,#text_filter,#text_filter");
    filtergrid.setInitWidths("*,160,160,160");
    filtergrid.setColAlign("left,left,left,left");
    filtergrid.setColTypes("ro,ro,ro,ro");
    filtergrid.setColSorting("str,str,str,str");
    filtergrid.init();
    filtergrid.load("{{ url('xml_Admin_rights') }}");
*/
    return true;
}


function onClickToolbar2(id,value)
{
    switch (id)
    {
       case "save_team":
           myLayout.cells("a").progressOn();
           teamForm.send("{{ url('xml_Admin_team_save') }}","POST",function(loader,response){
               if(response === "success")
               {
                 dhtmlx.message({
                    title:"Save",
                    type: "Notice",
                    lifetime: "60000",
                    text: "Team saved"
                 });
                 teamForm.clear();
                 teamForm.setItemFocus("name");
                 myTeams.loadXML("{{ url('xml_Admin_teams_grid') }}");
                 myForm.unload();
                 myForm = tabbar.cells("b1").attachForm(formData);
                 myLayout.cells("a").progressOff();
               } else
               {
                   myLayout.cells("a").progressOff();
                   alert(response);
               }
           });
           
       break;
       case "add_team":
           teamForm.clear();
           teamForm.setItemFocus("name");
           //teamForm.setItemValue("enterprise","{{ app.session.get('enterprise') }}");
       break;
       case "delete_team":
       break;
       default:
           break;
    }
}

function onClickToolbar1(id,value)
{
    switch (id) {
        case "save_user":
            if(myForm.validate()){
                myLayout.cells("a").progressOn();
                myForm.send("{{ url('xml_Admin_user_save') }}","POST",function(loader,response){
                if(response === "success")
                    {
                        dhtmlx.message({
                            title:"Save",
                            type: "Notice",
                            lifetime: "60000",
                            text: "{{ "User saved" | trans }}"
                        });
                        myForm.clear();
                        myForm.setItemFocus('username');
                        myTeams.loadXML("{{ url('xml_Admin_teams_grid') }}");
                        myLayout.cells("a").progressOff();
                    } else
                    {
                        myLayout.cells("a").progressOff();
                        alert(response);
                    }
                });
            }
        break;
        case "add_user":
            myForm.clear();
            myForm.setItemFocus('username');
            //myForm.setItemValue('enterprise',"{{ app.session.get('enterprise') }}");
        break;
        case "delete_user":
        break;
        default:
            break;
    }
}

function GlobalRefresh() {
    GridRefresh();
};
</script>
{% endblock %}
