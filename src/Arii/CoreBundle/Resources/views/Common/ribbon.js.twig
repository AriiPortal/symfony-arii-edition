<script language="javascript"> 
// Mode console
const DEBUG = true;
{% if app.session.get('UserInterface').refresh is defined %}
var update        = {{ app.session.get('UserInterface').refresh }};
var refreshPause = {{ app.session.get('UserInterface').refreshPause }};
var dayPast      = {{ app.session.get('UserInterface').dayPast }};
// Dates de reference
var startTime = new Date ("{{ app.session.get('UserInterface').past   | date('Y-m-d H:i:s') }}");
var endTime =   new Date ("{{ app.session.get('UserInterface').refDate | date('Y-m-d H:i:s') }}");
{% else %}
var update        = 30;
var refreshPause = 0;
var dayPast      = -1;
// Dates de reference
var startTime = new Date ();
var endTime =   new Date ();
{% endif %}

var autorefresh;
var refreshNext;
var nextTime = new Date();

function AriiLayout(bundle,activated,size) {
    globalLayout = new dhtmlXLayoutObject(document.body,"2U");  
    globalLayout.cells("a").setWidth(size); 
    globalLayout.cells("a").hideHeader();
    globalLayout.cells("b").hideHeader();
    
    myRibbon = globalLayout.attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/images/') }}" );
    myRibbon.loadStruct("{{ url('json_ARII_ribbon') }}?bundle="+bundle+"&activated="+activated, function() {
        NextRefresh(update);
        // repo en cours ?        
        myRibbon.setItemText("db", myRibbon.getItemOptionText('db', 'db.'+db));
        myRibbon.setItemText("dateNow", dayPast);
    });

    myRibbon.attachEvent("onClick", function (itemid,state) {
        var id = itemid.split('_');
        switch (id[0]) {
            case 'date':
                // date de tout de suite
                endTime = new Date();
                myRibbon.setValue( "dateEnd", endTime.Format() );
                
                // On recalcule la date de d√©but
                startTime = endTime.addDays(dayPast);
                myRibbon.setValue( "dateStart", startTime.Format() );
                break;
            case 'main':
                window.location = '{{ path('arii_homepage') }}';
                break;
            case 'home':
                window.location = '{{ path('arii_homepage') }}{{ app.request.locale }}/'+bundle.toLowerCase();        
                break;
            case 'BUNDLE':
                window.location = '{{ path('arii_homepage') }}{{ app.request.locale }}/'+id[1];
                break;
            case 'LANG':
                window.location = '{{ path('arii_homepage') }}'+bundle.toLowerCase()+'/'+id[1];
                break;
            case 'USER':
                switch (id[1]) {
                    case 'role':
                        window.location = '{{ path('arii_my_account') }}';
                        break;
                    case 'logout':
                        window.location = '{{ path('fos_user_security_logout') }}';
                        break;
                }
                break;
            case 'HELP':
                switch (id[1]) {
                    case 'sos':
                        window.location = 'http://www.sos-paris.com';
                        break;
                    case 'github':
                        window.location = 'https://github.com/AriiPortal';
                        break;
                    case 'readme':
                        window.location = '{{ path('arii_ACK_readme') }}';
                        break;
                    case 'api':
                        window.location = '{{ path('arii_homepage') }}{{ app.request.locale }}/'+bundle.toLowerCase()+'/swagger';
                        break;
                    default:
                        alert(id[1]);
                        break;                    
                }
                break;
            case 'refresh':
                switch(id[1]) {
                    case 'seconds':
                        update = id[2];
                        sendRequest( 
                            "PATCH",
                            "{{ url('api_Core_session_update') }}",
                            { "refresh": update },
                            function(){
                                // Affiche la nouvelle periode
                                var textUpdate;
                                switch(update) {
                                    case '5':
                                        textUpdate= "5s";
                                        break;
                                    case '30':
                                        textUpdate= "30s";
                                        break;
                                    case '60':
                                        textUpdate= "1min";
                                        break;
                                    case '300':
                                        textUpdate= "5min";
                                        break;
                                    case '900':
                                        textUpdate= "15min";
                                        break;
                                    case '1800':
                                        textUpdate= "30min";
                                        break;
                                    case '3600':
                                        textUpdate= "1h";
                                        break;
                                    default:
                                        textUpdate= "?";
                                        break;
                                }
                                myRibbon.setItemText( "refreshUpdate",textUpdate);
                                // Calcul du prochain refresh
                                NextRefresh();
                            }
                        );
                        break;
                }
                break;
            default:
                if (itemid.substr(0,3)==='db.') {
                    db = itemid.substr(3);
                    sendRequest( 
                        "PATCH",
                        "{{ url('api_Core_session_update') }}",
                        { "database": db },
                        function(){
                            myRibbon.setItemText("db", myRibbon.getItemOptionText('db', 'db.'+db));
                            GlobalRefresh();
                        }
                    );                     
                }
                else {
                    alert('CLICK '+id[0]);
                }
                break;
        }
    });
    myRibbon.attachEvent("onEnter", function(itemid,value) {
        var id = itemid.split('_');
        switch(id[0]) {        
            case 'date':
                switch(id[1]) {
                    case 'start':
                        startTime = new Date(value); 
                        // on met a jour le slider
                        dayPast = Math.round((startTime - endTime)/86400000);
                        myRibbon.setItemText("dateNow", dayPast);
                        myRibbon.setValue("dateDays",dayPast*-1);
                        break
                    case 'end':
                        endTime = new Date(value);
                        break
                    default:
                        alert(itemid);
                }
                break
            default:
                alert(itemid);
        }
        GlobalRefresh();    
    });
    myRibbon.attachEvent("onStateChange", function(itemid,state) {
        var id = itemid.split('_');
        switch(id[0]) {        
            case 'refreshPause':
                update = (state?1:0);
                sendRequest( 
                    "PATCH",
                    "{{ url('api_Core_session_update') }}",
                    { refreshPause: update },
                    function () {
                        if (refreshPause==1) {
                            myRibbon.setItemText( "refreshNext", '00:00:00');
                            myRibbon.setItemText( "refreshPause", update);
                        }
                        else {
                            NextRefresh();
                        }
                    }
                ); 
                break;        
            default:
                alert('STATE '+itemid);
        }
        GlobalRefresh();    
    });
    myRibbon.attachEvent("onSelectOption", function(itemid,ind,text) {
        var id = itemid.split('_');
        switch(id[0]) {
            case 'Filters':
                dhx4.ajax.get("{{ url('xml_filter_form') }}?id="+ind, function (r) {
                    var items = [];
                    var xml = r.xmlDoc.responseXML;
                    if (xml != null) {
                        var data;
                        data = xml.getElementsByTagName("title")[0];
                        if (typeof data !== 'undefined')
                            myRibbon.setItemText("current_filter",data.childNodes[0].nodeValue);
                        var Fields = [ "jobChain", "jobName", "triggerJob", "folder" ];                        
                        Fields.forEach(function(f) {
                            data = xml.getElementsByTagName(f)[0];
                            if (typeof data !== 'undefined') 
                                myRibbon.setValue("filter_"+f,data.childNodes[0].nodeValue);
                            else {
                                myRibbon.setValue("filter_"+f,'?');
                            }
                        });
                    } else {
                        // response is not in json format
                    }
                });
                break;
            default:
                alert('SELECT OPTION '+id+' '+ind+' '+text);
        }
        GlobalRefresh();    
    });
    myRibbon.attachEvent("onValueChange", function(itemid,value) {
        var id = itemid.split('_');
        switch(id[0]) { 
            case 'date':
                if (dayPast*-1===value)
                    return true;
                dayPast=value*-1; 
                // Changement
                myRibbon.setValue("dateDays",value);
                myRibbon.setItemText("dateNow", dayPast);
                
                startTime = new Date(endTime.valueOf());
                startTime.addDays(dayPast);
                myRibbon.setValue( "dateStart", startTime.Format() );
                // Mise a jour
                sendRequest( 
                    "PATCH",
                    "{{ url('api_Core_session_update') }}",
                    { "refreshPause": update },
                    function() { }
                );
                break;
            case 'maxResult':
                sendRequest( 
                    "PATCH",
                    "{{ url('api_Core_session_update') }}",
                    { "maxResult": update },
                    function(){
                        myRibbon.setItemText("maxResult", value);
                        myRibbon.setValue("maxResult",value);
                    }
                );
                break;
            default:
                alert('VALUE '+itemid);
        }
        GlobalRefresh();    
    }); 
    waitrefresh = setInterval( "WaitRefresh()",1000);    
    autorefresh = setInterval( "GlobalRefresh()",update*1000);    
}

function sendRequest(method,url,data,callback) {
	var req = createXMLHTTPObject();
	if (!req) return;

        req.open(method,url,true);
        var json = null;
	if (data) {
            json = JSON.stringify(data);
            req.setRequestHeader('Content-type','application/json');
        }
	req.onreadystatechange = function () {
            if (req.readyState != 4) return;
            if (req.status != 200 && req.status != 304) {             
                console.error(url+' '+req.status);
                return;
            }
            if (DEBUG)
                console.log(req.responseText);
            callback(req);
	}
	if (req.readyState == 4) return;
	req.send(json);
}

var XMLHttpFactories = [
    function () {return new XMLHttpRequest()},
    function () {return new ActiveXObject("Msxml2.XMLHTTP")},
    function () {return new ActiveXObject("Msxml3.XMLHTTP")},
    function () {return new ActiveXObject("Microsoft.XMLHTTP")}
];

function createXMLHTTPObject() {
    var xmlhttp = false;
    for (var i=0;i<XMLHttpFactories.length;i++) {
        try {
            xmlhttp = XMLHttpFactories[i]();
        }
        catch (e) {
            continue;
        }
        break;
    }
return xmlhttp;
}

function WaitRefresh() {
    if (refreshPause==1)
        return true; 
    
    var currentTime = new Date();
    myRibbon.setItemText( "refreshPause", Math.round((nextTime - currentTime)/1000) );
}

function GlobalRefresh() {
    if (refreshPause==1)
        return true; 
    refreshPause=0;    
    if (typeof PageRefresh === "function") { 
        PageRefresh();
    }    
    NextRefresh(update);
}

function NextRefresh() {
    if (refreshPause==1)
        return true; 
    
    nextTime = new Date();
    nextTime.setSeconds(nextTime.getSeconds() + update);
    myRibbon.setItemText( "refreshNext", ((nextTime.getHours() < 10)?"0":"") + nextTime.getHours() + ":" + ((nextTime.getMinutes() < 10)?"0":"") + nextTime.getMinutes() + ":" +  ((nextTime.getSeconds() < 10)?"0":"") + nextTime.getSeconds() );
    WaitRefresh();
}

// Prototypes
Date.prototype.addDays = function(days) {
    var date = new Date(this.valueOf());
    date.setDate(date.getDate() + days);
    return date;
}

Date.prototype.Format = function() {
    var date = new Date(this.valueOf());
    var text = date.getFullYear() 
            + "-" + (date.getMonth()  < 9 ?"0":"") + Number(date.getMonth()+1)     
            + "-" + (date.getDay()    < 10?"0":"") + date.getDay()          
            + ' ' + (date.getHours()  < 10?"0":"") + date.getHours() 
            + ":" + (date.getMinutes()< 10?"0":"") + date.getMinutes() 
            + ":" + (date.getSeconds()< 10?"0":"") + date.getSeconds() ;
return text;
}

</script>