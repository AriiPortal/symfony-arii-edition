<?php

namespace Arii\JIDBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SchedulerHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedulerHistoryRepository extends EntityRepository
{
    
   public function findSpoolers()
   {
        return $this->createQueryBuilder('a')
            ->Select('a.spoolerId,a.clusterMemberId,count(a) as Runs,max(a.startTime) as latestRun,min(a.startTime) as oldestRun')
            ->groupBy('a.spoolerId,a.clusterMemberId')                
            ->orderBy('a.spoolerId,a.clusterMemberId')
            ->getQuery()
            ->getResult();
   }    

   public function findRuns($from,$to,$sort='DESC',$limit=100)
   {
        $q = $this->createQueryBuilder('a')
            ->Select(
                    'a.id as taskId,a.spoolerId,a.clusterMemberId,a.jobName,a.startTime,a.endTime,a.cause,a.steps,a.exitCode,a.error,a.errorCode,a.errorText,a.parameters,a.log,a.pid,a.agentUrl,
                    s.step,
                    o.jobChain,o.spoolerId,o.state,o.stateText,o.orderId')
            ->leftjoin('AriiJIDBundle:SchedulerOrderStepHistory','s',\Doctrine\ORM\Query\Expr\Join::WITH,'a.id = s.task')                
            ->leftjoin('AriiJIDBundle:SchedulerOrderHistory','o',\Doctrine\ORM\Query\Expr\Join::WITH,'s.task = o.history')                
            ->Where('a.endTime <= :endTime')
            ->orderBy('a.startTime',$sort)
            ->setParameter('endTime', $to)
            ->setMaxResults($limit);
        if ($from != null) {
            $q->andWhere('a.startTime >= :startTime')
            ->setParameter('startTime', $from);
        }    
        return $q->getQuery()
                ->getResult();
   }    
   
}
