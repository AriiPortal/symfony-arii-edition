<?php

namespace Arii\JIDBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SchedulerOrderStepRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedulerOrderStepHistoryRepository extends EntityRepository
{   
    public function findOrderSteps($id) {
        $q = $this->createQueryBuilder('e')
        ->select('IDENTITY(e.task) as id,e.step,e.state,e.startTime,e.endTime,e.error,e.errorCode,e.errorText')
        ->where('e.history = :id')
        ->setParameter('id',$id)
        ->orderBy('e.step')
        ->getQuery();
        return $q->getResult();
    }
    
    public function findByOrder($id) {
        $q = $this->createQueryBuilder('s')
        ->select('IDENTITY(s.task) as taskId,s.step,s.state,s.startTime,s.endTime,s.error,s.errorCode,s.errorText,'
                . 'h.jobName,h.clusterMemberId,h.steps,h.exitCode')
        ->leftjoin('AriiJIDBundle:SchedulerHistory','h',\Doctrine\ORM\Query\Expr\Join::WITH,'s.task = h.id')                
        ->where('IDENTITY(s.history) = :id')
        ->setParameter('id',$id)
        ->orderBy('s.step')
        ->getQuery();
        // print $q->getSQL();
        return $q->getResult();
    }
    
    // Crashs database
    public function findStepsWithoutHistory($limit=1000) {
        $q = $this->createQueryBuilder('s')
        ->select('s')
        ->leftjoin('AriiJIDBundle:SchedulerHistory','h',\Doctrine\ORM\Query\Expr\Join::WITH,'s.task = h.id')
        ->where('h.id is null')
        ->orderBy('s.task')
        ->setMaxResults($limit)              
        ->getQuery();
        return $q->getResult();
    }
    
    public function firstId() {
        $q = $this->createQueryBuilder('s')
        ->select('min(s.task)')
        ->getQuery();
        return $q->getSingleScalarResult();
    }

    public function lastId() {
        $q = $this->createQueryBuilder('s')
        ->select('max(s.task)')
        ->getQuery();
        return $q->getSingleScalarResult();
    }
    
    // pour le module Report
    public function synchro($id,$limit) {
        $q = $this->createQueryBuilder('s')
        ->select('(s.history) as idOrder,(s.task) as idHistory,s.step,s.state,s.error,s.errorCode,s.errorText')
        ->where('(s.task) > :last')
        ->andWhere('(s.task) <= :limit')
        ->orderBy('s.task')
        ->setParameter('last', $id)
        ->setParameter('limit', $id+$limit)
        ->getQuery();
//        print $q->getSQL();
        return $q->getResult();
    }

}
