{# src/Arii/JIDBundle/Resources/views/Default/history.html.twig #}
{% extends "AriiJIDBundle::layout.html.twig" %}
{% block body %}
<script type="text/javascript">
var max_history = 0; // pas d'historique
var chained = 0; // que des standalone
var only_warning = 0; // que les problemes
var update=30;
var autorefresh;

var status;

dhtmlxEvent(window,"load",function(){     
    globalLayout = new dhtmlXLayoutObject(document.body,"3L");  
    globalLayout.cells("a").setWidth(350); 
    globalLayout.cells("a").hideHeader(); 
    globalLayout.cells("b").hideHeader(); 
    globalLayout.cells("c").setHeight(260); 

    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/images/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/images/') }}" );
    myRibbon.loadStruct("{{ url('json_JID_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
    
    myAccordion = globalLayout.cells("a").attachAccordion();
    myAccordion.addItem("a1", "{{ "Status" | trans }}");
//    myAccordion.addItem("a2", "{{ "Folders" | trans }}");

    myDonut =  myAccordion.cells("a1").attachChart({
            view:"donut",
            container:"pie_chart_container",
            value:"#JOBS#",
            label:"",
            tooltip: "#STATUS#",
            color: "#COLOR#",
            border:false,
            pieInnerText: "#JOBS#",
            shadow: 0,
            legend:{
                width: 0,
                template: "#STATUS#",
                valign:"top",
                align:"left"
            } 
    });
    myDonut.load( "{{ url('xml_JID_jobs_pie') }}?chained="+chained+"&only_warning="+only_warning );
/*    
    myTree = myAccordion.cells("a2").attachTree();
//    myTree = globalLayout.cells("a").attachTree();
    myTree.setImagesPath("{{ asset('/images/') }}");
    myTree.attachEvent("onDblClick", function(id){
        globalLayout.cells("a").progressOn();
        GlobalRefresh();
    });
*/    
    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/images/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{{ url('xml_JID_jobs_grid_menu') }}");
          
    myGrid = globalLayout.cells("b").attachGrid();
    myGrid.selMultiRows = true;
    myGrid.setImagePath( "{{ asset('/images/') }}");
    myGrid.setHeader("{{ "Spooler" | trans }},{{ "Folder" | trans }},{{ "Job" | trans }},{{ "Status" | trans }},#cspan,{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Duration" | trans }},{{ "Exit" | trans }},{{ "Timeline" | trans }},{{ "PID" | trans }},&nbsp;");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#select_filter,#cspan,#text_filter,#text_filter,#text_filter,#text_filter,<img width='480' src='{{app.request.baseurl}}/public/gantt'/>,#text_filter,#rspan");
    myGrid.setInitWidths("100,*,*,90,40,150,150,110,60,495,60,35");
    myGrid.setColAlign("left,left,left,center,center,right,right,right,right,right,right,center");
    myGrid.setColTypes("ro,ro,ro,ro,img,ro,ro,ro,ro,ro,ro,img");
    myGrid.setColSorting("str,str,str,str,str,date,date,str,str,str,int,str");
    myGrid.enableContextMenu(myGridMenu);
    myGrid.attachEvent("onBeforeContextMenu", onShowMenu );
    myGrid.init();
    myGrid.setColumnHidden(0,true);
    myGrid.setColumnHidden(6,true); 
    myGrid.setColumnHidden(7,true); 
    myGrid.setColumnHidden(9,true); 
    myGrid.setColumnHidden(10,true); 
    myGrid.load( "{{ url('xml_JID_jobs_grid') }}");
    myGrid.attachEvent("onRowDblClicked",JobDetail );

    myDonut.attachEvent("onItemClick",function(id, value){
        status = id;
        myGrid.filterBy(3, status);  
        myGrid.getFilterElement(3).value = status;      
    });
/*    
    myTree.attachEvent("onClick",function(id, value){
        var Path = id.split('/');
        Path.shift();
        var spooler = Path.shift();
        var folder = Path.join('/');
        myGrid.filterBy(0, spooler);
        myGrid.filterBy(1, folder);  
    });
*/
    myGridToolbar = globalLayout.cells("b").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('/images/') }}");
    myGridToolbar.loadStruct( "{{ url('xml_JID_jobs_grid_toolbar') }}");
    myGridToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case 'refresh':
                globalLayout.cells("b").progressOn();
                GlobalRefresh();
                break;
            case "print":
                myGrid.printView();
                break;
            case "rss":
                document.location.href = "{{ url('rss_JID_history_job') }}";
                break;
            default:
                alert(itemid);
                break;
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(itemid, state){
         switch (itemid) {
            case 'spooler':
                myGrid.setColumnHidden(0,!state);  
                break;
            case 'duration':
                myGrid.setColumnHidden(6,!state);  
                myGrid.setColumnHidden(7,!state);  
                break;
            case 'gantt':
                myGrid.setColumnHidden(9,!state);  
                break;
            case 'pid':
                myGrid.setColumnHidden(10,!state);  
                break;
            default:
                alert(itemid);
                break;
        }
    });
    
    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        spooler = myGrid.cells(rId,0).getValue();
        switch (menuitemId) {
           case "spooler_go":
                window.open('/js/'+spooler+'/', spooler);
                break;
           case "show_info":
                JobInfo( rId );
            break;
            case "doc":
                window.open('{{ url('arii_JID_job_doc') }}?id='+rId,'arii_doc');
                break;
           case "job_history":
                document.location.href = "{{ url('arii_JID_history_job') }}?id="+rId;
            break;
           case "order_history":
                document.location.href = "{{ url('arii_JID_order_history') }}?id="+rId;
            break;
            case "show_why":
                ShowWhy( rId);
                break;
            case "pause_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=pause_spooler&spooler_id",spooler);
                break;
            case "continue_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=continue_spooler&spooler_id",spooler);
                break;
            case "check_spooler":
                // Spooler("{{ url('arii_JID_spooler_update') }}?id",spooler);
                CheckSpooler(spooler);
                break;
            case "terminate_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=restart_spooler&spooler_id",spooler);
                break;
            case "abort_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=abort_spooler&spooler_id",spooler);
                break;
            case "purge_job":
                PurgeJob( rId );
            break;
            case "job_view":
            case "job_detail":
                JobDetail( rId );
            break;
            case "order_detail":
                OrderDetail( rId );
            break;
            case "stop_chain":
                Chain(rId,menuitemId,"{{ "Stop chain" | trans }}",null);
                break;
            case "unstop_chain":
                Chain(rId,menuitemId,"{{ "Unstop chain" | trans }}",null);
                break;
            case "stop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Stop node" | trans }}",null);
                break;
            case "unstop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unstop node" | trans }}",null);
                break;
            case "skip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Skip node" | trans }}",null);
                break;
            case "unskip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unskip node" | trans }}",null);
                break;            
            case "suspend_order":
            case "resume_order":
                    alert(menuitemId);
                break;
            case "reset_order":
                XMLCommand(rId,menuitemId);
                break;
            default:
                alert("inconnu ! "+menuitemId);    
        }
        return true;
    });

    myTabbar = globalLayout.cells("c").attachTabbar();
    myTabbar.addTab("job","{{ "Job" | trans }}","100px", null, true);
    myTabbar.addTab("log","{{ "Log" | trans }}","100px");
    myTabbar.addTab("history","{{ "History" | trans }}","100px");
    myTabbar.cells("log").attachEvent("onContentLoaded", function(){
        this.progressOff(); 
    });

    myDetailLayout = myTabbar.cells("job").attachLayout("2U");
    myDetailLayout.cells("a").hideHeader(); 
    myDetailLayout.cells("b").hideHeader(); 
    myDetailLayout.cells("a").setWidth(640); 
    
    myForm = myDetailLayout.cells("a").attachForm();
    myForm.loadStruct("{{ url('json_JID_jobs_form') }}");
    
{% if is_granted('ROLE_OPERATOR') %}
    myDetailToolbar = myDetailLayout.cells("a").attachToolbar();
    myDetailToolbar.setIconsPath("{{ asset('/images/') }}");
    myDetailToolbar.loadStruct( "{{ url('xml_JID_jobs_form_toolbar') }}" , function(){
        GBCalendar = new dhtmlXCalendarObject(myDetailToolbar.getInput('refDate'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });
    
    myParametersToolbar = myDetailLayout.cells("b").attachToolbar();
    myParametersToolbar.setIconsPath("{{ asset('/images/') }}");
    myParametersToolbar.loadStruct("{{ url('xml_JID_job_params_toolbar') }}");
{% endif %}

    myParameters = myDetailLayout.cells("b").attachGrid();
    myParameters.selMultiRows = true;
    myParameters.setHeader("{{ "Parameter" | trans }},{{ "Value" | trans }}");
    myParameters.setColTypes("ed,ed");
    myParameters.setInitWidths("*,*");
    myParameters.init();
/*    
    myLog = myTabbar.cells("b2").attachGrid();
    myLog.setHeader("{{ "Date" | trans }},{{ "Type" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
    myLog.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
    myLog.setInitWidths("180,60,*,60");
    myLog.setColAlign("right,left,left,right");
    myLog.setColTypes("ro,ro,ro,ro");
    myLog.setColSorting("date,str,str,int");
    myLog.init();
*/
    myHistory = myTabbar.cells("history").attachGrid();
    myHistory.setHeader("{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Duration" | trans }},{{ "Error" | trans }},{{ "Exit" | trans }},{{ "Message" | trans }}");
    myHistory.attachHeader("#text_filter,#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    myHistory.setInitWidths("140,140,110,80,70,*");
    myHistory.setColAlign("right,right,right,right,right,left");
    myHistory.setColTypes("ro,ro,ro,ro,ro,ro");
    myHistory.setColSorting("date,date,str,int,int,str");
    myHistory.init();
    myHistory.enableAlterCss("even_row","odd_row");
    
{% if is_granted('ROLE_OPERATOR') %}    
    myDetailToolbar.attachEvent("onClick",function(itemid){
        Text = '';
        var id = myForm.getItemValue('ID');
        switch(itemid) {
            case "start_job":
                Text = "{{ "Start job" | trans }}";
                break;
            case "stop_job":
                Text = "{{ "Stop job" | trans }}";
                break;
            case "unstop_job":
                Text = "{{ "Unstop job" | trans }}";
                break;
            case "delete_task":
            case "kill_task":
                Text = "{{ "Kill task" | trans }}";
                break;
        }
        switch(itemid) {
            case "start_job":
            case "stop_job":
            case "unstop_job":
            case "delete_task":
            case "kill_task":
                var params = new Array();
                myParameters.forEachRow(function(id){
                    var param = myParameters.cells(id,0).getValue() + "=" + encodeURIComponent(myParameters.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                start_time = myDetailToolbar.getValue("refDate");
                // alert("{{ url('arii_XML_Command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&job_id="+id); 
                dhtmlx.message({
                type: "Notice",
                text: Text });
                globalLayout.cells("a").progressOn();        
                globalLayout.cells("b").progressOn();
                // alert("{{ url('arii_XML_Command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&job_id="+id);
                dhx4.ajax.post("{{ url('arii_XML_Command') }}","command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&job_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GlobalRefresh();
                });
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });
    
    myParametersToolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                myParameters.addRow(myParameters.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });
{% endif %}    
    
    // Premier chargement avant le smart rendering
    autorefresh = setInterval( "GridRefresh()",update*1000);
});

function GlobalRefresh() {
    clearInterval( autorefresh );
    GridRefresh();
    autorefresh = setInterval( "GridRefresh()", update*1000 );
}

function GridRefresh() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    myRibbon.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    myGrid.load("{{ url('xml_JID_jobs_grid') }}?time="+seconds+"&history="+max_history+"&chained="+chained+"&only_warning="+only_warning, function(){    
        globalLayout.cells("b").progressOff();
        myGrid.refreshFilters();
        myGrid.filterByAll();
//        myGrid.filterBy(4, status);  
        myDonut.load( "{{ url('xml_JID_jobs_pie') }}?chained="+chained+"&only_warning="+only_warning, function () {
            myDonut.refresh();                
            globalLayout.progressOff();
            globalLayout.cells("a").progressOff();
//            myTree.smartRefreshBranch(0,"{{ url('xml_JID_jobs_tree') }}?chained="+chained+"&only_warning="+only_warning);                    
        });
    });    
}

function JobDetail(id) {
    myTabbar.cells("job").progressOn();
    myForm.load("{{ url('xml_JID_job_form') }}?id="+id);
    // mise a jour de la toolbar
    var status = myGrid.cells(id, 3 ).getValue();
{% if is_granted('ROLE_OPERATOR') %}    
    myDetailToolbar.showItem('unstop_job');
    myDetailToolbar.showItem('stop_job');
    myDetailToolbar.showItem('kill_task');
    if (status== 'STOPPED') {
        myDetailToolbar.hideItem('stop_job');
    }
    else {
        myDetailToolbar.hideItem('unstop_job');
    }
    if (status!= 'RUNNING') {
        myDetailToolbar.hideItem('kill_task');      
    }
{% endif %}
    
    myTabbar.cells("history").progressOn();
    myTabbar.cells("log").attachURL("{{ url('xml_JID_job_log') }}?id="+id);
    myParameters.load("{{ url('xml_JID_job_params') }}?id="+id, function () {
        myTabbar.cells("job").progressOff();    
        myHistory.clearAll();
        myHistory.load("{{ url('xml_JID_job_history') }}?id="+id, function () {
            myTabbar.cells("history").progressOff();    
        });
    });

}

function onShowMenu(rowId, celInd, grid) {

    var status = grid.cells(rowId, 3 ).getValue();

    // si on est operator 
    {% if is_granted('ROLE_OPERATOR') %}
    if (status !=='RUNNING') {
        myGridMenu.hideItem('kill_task');    
    }
    else {
        myGridMenu.showItem('kill_task');    
    }
    if (status !=='QUEUED')  {
        myGridMenu.hideItem('delete_task');    
    }
    else {
        myGridMenu.showItem('delete_task');    
    }
    // job stoppé
    if ((grid.cells(rowId, 3).getValue()== 'STOPPED') 
         || (grid.cells(rowId, 3).getValue()== 'STOPPING') ){    
        myGridMenu.hideItem("stop_job");
        myGridMenu.showItem("unstop_job");
    }
    else {
        myGridMenu.hideItem("unstop_job");
        myGridMenu.showItem("stop_job");
    }
    {% else %}
        myGridMenu.hideItem('start_job');
        myGridMenu.hideItem('kill_task');
        myGridMenu.hideItem('stop_job');
        myGridMenu.hideItem('unstop_job');
        myGridMenu.hideItem('pause_spooler');    
        myGridMenu.hideItem('continue_spooler');    
    {% endif %} 
 return true;
}

// Fonctions
function CheckSpooler(rid) 
{
    dhx4.ajax.get("{{ url('arii_JID_spooler_update') }}?id="+rid,function(loader,response){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
    });
return true;
}

function Spooler(url,rid)
{
    dhx4.ajax.get.get(url+"="+rid,function(loader,response){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        CheckSpooler(rid);
    });
    return true;
}

</script>
</body>
{% endblock %}
