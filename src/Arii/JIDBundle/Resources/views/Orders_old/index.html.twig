{% extends "AriiJIDBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
function Init() {

    myLayout =  globalLayout.cells("b").attachLayout("2E");
    myLayout.cells("a").hideHeader();
    myLayout.cells("b").hideHeader();
    
    myToolbar = myLayout.cells("b").attachToolbar();
    myToolbar.setIconsPath( "{{ asset('/images/') }}" );
    
    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/images/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{{ url('xml_JID_orders_grid_menu') }}");

    myGrid = myLayout.cells("a").attachGrid();
    myGrid.setImagePath( "{{ asset('/images/') }}");
    myGrid.setHeader("{{ "Spooler" | trans }},{{ "Folder" | trans }},{{ "Chain" | trans }},{{ "Order" | trans }},{{ "State" | trans }},{{ "Status" | trans }},{{ "Begin" | trans }},{{ "End" | trans }},{{ "Next" | trans }},{{ "Information" | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter");
    myGrid.setInitWidths("*,*,180,160,160,150,160,160,160,*");
    myGrid.setColAlign("left,left,left,left,left,center,right,right,right,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.setColSorting("str,str,str,str,str,str,date,date,date,str");
    myGrid.enableContextMenu(myGridMenu);
    myGrid.attachEvent("onBeforeContextMenu", onShowMenu );
    myGrid.enableAlterCss("","");
    myGrid.init();
    myGrid.enableLightMouseNavigation( true );    
    // myGrid.setColumnHidden(0,true); 
    myGrid.setColumnHidden(7,true); 
    myGrid.setColumnHidden(8,true); 
    myGrid.enableSmartRendering(true,50);
    myGrid.attachEvent("onRowDblClicked",OrderDetail );
        
    myGridToolbar = myLayout.cells("a").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('/images/') }}");
    myGridToolbar.loadStruct( "{{ url('xml_JID_orders_grid_toolbar') }}");
    myGridToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case "print":
                myGrid.printView();
                break;
            case "rss":
                document.location.href = "{{ url('rss_JID_history_orders') }}";
                break;
            case 'undock':
                myLayout.cells("a").undock();
                break;
            default:
                if (itemid.substr(0,5)==='sort_') {
                    sort = itemid.substr(5);
                    myLayout.cells("a").progressOn();
                    GlobalRefresh();
                }
                else {
                    alert(itemid);
                }
                break;
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(itemid, state){
         switch (itemid) {
            case 'show_spooler':
                myGrid.setColumnHidden(0,!state);
                break;
            case 'show_time':
                myGrid.setColumnHidden(7,!state);      
                myGrid.setColumnHidden(8,!state);
                break;
            case 'gantt':
                myGrid.setColumnHidden(5,state);      
                myGrid.setColumnHidden(6,state);      
                myGrid.setColumnHidden(7,state);  
                myGrid.setColumnHidden(8,state);   
                myGrid.setColumnHidden(9,!state);  
                break;
            default:       
                alert(itemid);
                break;
        }
    });    
    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        spooler = myGrid.cells(rId,0).getValue();
        switch (menuitemId) {
           case "spooler_go":
                window.open('/js/'+spooler+'/', spooler);
                break;
           case "show_info":
                JobInfo( rId );
            break;
            case "doc":
                window.open('{{ url('arii_JID_job_doc') }}?id='+rId,'arii_doc');
                break;
           case "job_history":
                document.location.href = "{{ url('arii_JID_history_job') }}?id="+rId;
            break;
           case "order_view":
                document.location.href = "{{ url('arii_JID_order') }}?id="+rId;
            break;
           case "order_history":
                document.location.href = "{{ url('arii_JID_order_history') }}?id="+rId;
            break;
            case "show_why":
                ShowWhy( rId);
                break;
            case "pause_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=pause_spooler&spooler_id",spooler);
                break;
            case "continue_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=continue_spooler&spooler_id",spooler);
                break;
            case "check_spooler":
                // Spooler("{{ url('arii_JID_spooler_update') }}?id",spooler);
                CheckSpooler(spooler);
                break;
            case "terminate_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=restart_spooler&spooler_id",spooler);
                break;
            case "abort_spooler":
                Spooler("{{ url('arii_XML_Command') }}?command=abort_spooler&spooler_id",spooler);
                break;
            case "purge_job":
                PurgeJob( rId );
            break;
            case "order_detail":
                OrderDetail( rId );
            break;
            case "stop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Stop node" | trans }}",null);
                break;
            case "unstop_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unstop node" | trans }}",null);
                break;
            case "skip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Skip node" | trans }}",null);
                break;
            case "unskip_node":
                nId = mygrid.getUserData(rId,'TASK_ID');
                Node(rId,nId,menuitemId,"{{ "Unskip node" | trans }}",null);
                break;
            case "suspend_order":
            case "resume_order":
                    alert(menuitemId);
                break;
            case "reset_order":
                XMLCommand(rId,menuitemId);
                break;
            default:
                alert("inconnu ! "+menuitemId);    
        }
        return true;
    });

    myLayout.cells("b").setHeight(300); 
    myTabbar = myLayout.cells("b").attachTabbar();
    myTabbar.addTab("order","{{ "Order" | trans }}","100px", null, true);
    myTabbar.addTab("chain","{{ "Chain" | trans }}","100px" );
    myTabbar.addTab("log","{{ "Log" | trans }}","100px");
    myTabbar.addTab("history","{{ "History" | trans }}","100px");

    myDetailLayout = myTabbar.cells("order").attachLayout("2U");
    myDetailLayout.cells("a").hideHeader(); 
    myDetailLayout.cells("b").hideHeader(); 
    
    formData = [
        {type:"settings",
            position: "label-left", 
            labelAlign:"right", 
            labelWidth:"80",
            inputWidth:"140" },
        {type:"input", name: "SPOOLER_ID", label:"{{ "Spooler" | trans}}" },
        {type:"input",    name: "START_TIME", label:"{{ "Start" | trans}}"},
        {type:"input",    name: "END_TIME", label:"{{ "End" | trans}}"},
        {type:"input",    name: "STATE", label:"{{ "Step" | trans}}"},
        {type:"hidden",    name: "HISTORY_ID" },
        {type:"newcolumn"},
      {   type:"input",    
                name: "JOB_CHAIN", 
                label:"{{ "Chain" | trans}}",
                inputWidth:"300" 
        },
        {   type:"input",    
                name: "ORDER_ID", 
                label:"{{ "Order" | trans}}", 
                inputWidth:"300"  
        },
        {   type:"input",    
                name: "TITLE", 
                label:"{{ "Title" | trans}}",
                inputWidth:"300"  
        },
        {   type:"input",    
                name: "STATE_TEXT", 
                label:"{{ "Output" | trans}}", 
                inputWidth:"300",
                rows: 4
        }
    ];
    myForm = myDetailLayout.cells("a").attachForm(formData);
    
{% if is_granted('ROLE_OPERATOR') %}
    myDetailToolbar = myDetailLayout.cells("a").attachToolbar();
    myDetailLayout.cells("a").setWidth(650); 
    myDetailToolbar.setIconsPath("{{ asset('/images/') }}");
    myDetailToolbar.loadStruct( "{{ url('xml_JID_orders_form_toolbar') }}" , function(){
        GBCalendar = new dhtmlXCalendarObject(myDetailToolbar.getInput('refDate'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);        
        this.hideItem('resume_order');
        this.hideItem('remove_setback');
    });
    
    myDetailToolbar.attachEvent("onClick",function(itemid){
        Text = '';
        var id = myForm.getItemValue('HISTORY_ID');
        switch(itemid) {
           case "order_view":
                document.location.href = "{{ url('arii_JID_order') }}?id="+rId;
                return true;
                break;
            case "modify_order":
                Text = "{{ "Restart order" | trans }}";
                break;
            case "suspend_order":
                Text = "{{ "Suspend order" | trans }}";
                break;
            case "resume_order":
                Text = "{{ "Resume order" | trans }}";
                break;
        }
        switch(itemid) {
            case "start_order":
            case "modify_order":
            case "suspend_order":
            case "resume_order":
                var params = new Array();
                myParameters.forEachRow(function(id){
                    var param = myParameters.cells(id,0).getValue() + "=" + encodeURIComponent(myParameters.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                start_time = myDetailToolbar.getValue("refDate");
                // alert("{{ url('arii_XML_Command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&order_id="+id); 
                dhtmlx.message({
                type: "Notice",
                text: Text });
                myLayout.cells("a").progressOff();                
                dhx4.ajax.post("{{ url('arii_XML_Command') }}","command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    // myLayout.cells("a").attachHTMLString(loader.xmlDoc.responseText);
                    OrderDetail(id);
                    GlobalRefresh();                    
                });
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });
    
    myParametersToolbar = myDetailLayout.cells("b").attachToolbar();
    myParametersToolbar.setIconsPath("{{ asset('/images/') }}");
    myParametersToolbar.loadStruct("{{ url('xml_JID_job_params_toolbar') }}");
{% endif %}
    
    myParameters = myDetailLayout.cells("b").attachGrid();
    myParameters.selMultiRows = true;
    myParameters.setHeader("{{ "Parameter" | trans }},{{ "Value" | trans }}");
    myParameters.setColTypes("ed,ed");
    myParameters.setInitWidths("*,*");
    myParameters.init();

    
    myChainDetail =  myTabbar.cells("chain").attachLayout("2U");
    // myChainDetail.cells("a").setText("{{ "Steps" | trans }}");
    myChainDetail.cells("a").hideHeader();
    // myChainDetail.cells("b").setText("{{ "Graph" | trans }}");
    myChainDetail.cells("b").hideHeader();
    myChainDetail.cells("b").attachEvent("onContentLoaded", function(){
        this.progressOff(); 
    });
        
    myChainToolbar = myChainDetail.cells("a").attachToolbar();
    myChainToolbar.setIconsPath("{{ asset('/images/') }}");
    myChainToolbar.loadStruct( "{{ url('xml_JID_orders_chain_toolbar') }}" );

    myChainToolbar.attachEvent("onClick",function(itemid){
        var id = myForm.getItemValue('HISTORY_ID');
        switch (itemid) {
            case "refresh":
                break;
            case "stop_chain":
                Text = "{{ "Stop chain" | trans }}";
                break;
            case "unstop_chain":
                Text = "{{ "Unstop chain" | trans }}";
                break;
        }
        switch (itemid) {
            case "stop_chain":
            case "unstop_chain":
                dhtmlx.message({
                type: "Notice",
                text: Text });
//                alert("{{ url('arii_XML_Command') }}?command="+itemid+"&order_id="+id);
                dhx4.ajax.post("{{ url('arii_XML_Command') }}","command="+itemid+"&order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    myLayout.progressOn();   
                    GlobalRefresh();
{% if is_granted('ROLE_OPERATOR') %}
                    if (itemid=='stop_chain') {
                        myChainToolbar.hideItem('stop_chain');
                        myChainToolbar.showItem('unstop_chain');
                    }
                    else {
                        myChainToolbar.hideItem('stop_chain');
                        myChainToolbar.showItem('unstop_chain');
                    }
{% endif %}
                });
                break;
        }
    });
    
    mySteps = myChainDetail.cells("a").attachGrid();
    mySteps.setHeader("{{ "Step" | trans }},{{ "State" | trans }},{{ "Status" | trans }},{{ "Begin" | trans }},{{ "End" | trans }},{{ "Error" | trans }},{{ "Code" | trans }},{{ "Message" | trans }}");
    mySteps.attachHeader("#numeric_filter,#select_filter,#select_filter,#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    mySteps.setInitWidths("80,*,120,160,160,60,60,200");
    mySteps.setColAlign("right,left,left,right,right,right,right,left");
    mySteps.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
    mySteps.setColSorting("int,str,str,date,date,int,str,str");
    mySteps.setColumnHidden(4,true);  
    mySteps.setColumnHidden(5,true);  
    mySteps.setColumnHidden(6,true);  
    mySteps.enableAlterCss("","");
    mySteps.init();

    myHistory = myTabbar.cells("history").attachGrid();
    myHistory.setHeader("{{ "Start" | trans }},{{ "End" | trans }},{{ "State" | trans }},!,{{ "Message" | trans }}");
    myHistory.attachHeader("#text_filter,#text_filter,#select_filter,#select_filter,#text_filter");
    myHistory.setInitWidths("160,160,150,40,*");
    myHistory.setColAlign("right,right,right,center,left");
    myHistory.setColTypes("ro,ro,ro,ro,ro");
    myHistory.setColSorting("date,date,str,str,str");
    myHistory.init();
    myHistory.enableSmartRendering(true,50);
    myHistory.enableAlterCss("","");

}

function PageRefresh() {
    myGrid.load("{{ url('xml_JID_orders_grid') }}?history="+max_history+"&chained="+chained+"&only_warning="+only_warning+"&sort="+sort, function(){
        myLayout.progressOff();
        myGrid.filterBy(5, status);
        myGrid.filterByAll();
        refreshPause=0;
    });    
}

function OrderDetail(id) {
    clearInterval( autorefresh );
    
    myTabbar.cells("order").progressOn();
    myTabbar.cells("chain").progressOn();
    myTabbar.cells("history").progressOn(); 
    
    myForm.load("{{ url('xml_JID_order_form') }}?id="+id);
    // mise a jour de la toolbar
    var status = myGrid.cells(id, 5 ).getValue();
{% if is_granted('ROLE_OPERATOR') %}  
    myDetailToolbar.showItem('add_order');
    myDetailToolbar.showItem('suspend_order');
    myDetailToolbar.showItem('resume_order');
    myChainToolbar.showItem('stop_chain');
    myChainToolbar.showItem('unstop_chain');
    if (status== 'SUSPENDED') {
        myDetailToolbar.hideItem('suspend_order');
    }
    else if (status== 'CHAIN STOP.') {
        myChainToolbar.hideItem('stop_chain');
    }
    else {
        myChainToolbar.hideItem('unstop_chain');
        myDetailToolbar.hideItem('resume_order');
    }
{% endif %}    

    myChainDetail.cells("b").attachURL("{{ url('svg_JID_process_steps') }}?id="+id);    
    myTabbar.cells("log").attachURL("{{ url('xml_JID_order_log') }}?id="+id);
    myParameters.load("{{ url('xml_JID_order_params') }}?id="+id, function() {
        myTabbar.cells("order").progressOff();
        mySteps.clearAndLoad("{{ url('xml_JID_order_steps') }}?id="+id, function() {
            myTabbar.cells("chain").progressOff();
                myHistory.clearAndLoad("{{ url('xml_JID_order_history') }}?id="+id, function() {                   
                    myTabbar.cells("history").progressOff();    
                    myLayout.cells("b").progressOff(); 
                    autorefresh = setInterval( "GridRefresh()", update*1000 );
                });  
        });
  });
}

function onShowMenu(rowId, celInd, grid) {

    var status = grid.cells(rowId, 3 ).getValue();

    // si on est operator 
    {% if is_granted('ROLE_OPERATOR') %}
    if (status !=='RUNNING') {
        myGridMenu.hideItem('kill_task');    
    }
    else {
        myGridMenu.showItem('kill_task');    
    }
    if (status !=='QUEUED')  {
        myGridMenu.hideItem('delete_task');    
    }
    else {
        myGridMenu.showItem('delete_task');    
    }
    // job stoppé
    if ((grid.cells(rowId, 3).getValue()== 'STOPPED') 
         || (grid.cells(rowId, 3).getValue()== 'STOPPING') ){    
        myGridMenu.hideItem("stop_job");
        myGridMenu.showItem("unstop_job");
    }
    else {
        myGridMenu.hideItem("unstop_job");
        myGridMenu.showItem("stop_job");
    }
    {% else %}
        myGridMenu.hideItem('start_job');
        myGridMenu.hideItem('kill_task');
        myGridMenu.hideItem('stop_job');
        myGridMenu.hideItem('unstop_job');
        myGridMenu.hideItem('pause_spooler');    
        myGridMenu.hideItem('continue_spooler');    
    {% endif %} 
 return true;
}
</script>
{% endblock %}