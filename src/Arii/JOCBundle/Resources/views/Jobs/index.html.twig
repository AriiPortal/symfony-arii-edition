{# src/Arii/JOCBundle/Resources/views/Default/history.html.twig #}
{% extends "AriiJOCBundle::layout.html.twig" %}
{% block body %}
<!--[if !IE]>end section<![endif]-->
<script language="javascript">
var max_history = 0; // pas d'historique
var chained = 0; // que des standalone
var only_warning = 0; // que les problemes
var update=30;
var autorefresh;
var job = -1;

dhtmlxEvent(window,"load",function(){ 

    globalLayout = new dhtmlXLayoutObject(document.body,"3L");
    globalLayout.cells("a").setWidth(410); 
    
    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/images/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/images/') }}" );
    myRibbon.loadStruct("{{ url('json_JOC_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );

    myAccordion = globalLayout.cells("a").attachAccordion();
    myAccordion.addItem("a1", "{{ "Status" | trans }}");
    myAccordion.addItem("a2", "{{ "Folders" | trans }}");

    myDonut =  myAccordion.cells("a1").attachChart({
            view:"donut",
            container:"pie_chart_container",
            value:"#JOBS#",
            label:"",
            tooltip: "#STATUS#",
            color: "#COLOR#",
            border:false,
            pieInnerText: "#JOBS#",
            shadow: 0,
            legend:{
                  width: 0,
                  template: "#STATUS#",
                valign:"top",
                align:"left"
            } 
    });
    myDonut.load( "{{ url('xml_JOC_jobs_pie') }}?chained="+chained+"&only_warning="+only_warning );

{% if is_granted('ROLE_OPERATOR') %}
    myGridToolbar = globalLayout.cells("b").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('/images/') }}");
    myGridToolbar.loadStruct("{{ url('xml_JOC_jobs_toolbar') }}");

    myGridToolbar.attachEvent( "onClick", function(id, value) {
        switch (id) {
            case "refresh":
                globalLayout.cells("b").progressOn();
                update = value;
                GlobalRefresh();
                break;
            default:
                alert(id);
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(id,state){
        switch (id) {
            case 'comment':
                myGrid.setColumnHidden(3,!state);  
                break;
            case 'show_time':
                myGrid.setColumnHidden(7,!state);  
                myGrid.setColumnHidden(8,!state);  
                break;
            case 'target':
                myGrid.setColumnHidden(9,!state);  
                break;
            default:
                alert(id);
        }
    });
{% endif %}    
    globalLayout.cells("a").hideHeader();
    globalLayout.cells("b").hideHeader();
    globalLayout.cells("c").setHeight(300);

    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/images/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{{ url('xml_JOC_jobs_menu') }}");

    myGrid = globalLayout.cells("b").attachGrid();
    myGrid.setImagePath( "{{ asset('/images/') }}");
    myGrid.setHeader("{{ "Spooler" | trans }},{{ "Folder" | trans }},{{ "Job" | trans }},{{ "Title" | trans }},{{ "State" | trans }},{{ "Message" | trans }},{{ "Information" | trans }},{{ "Next start" | trans }},{{ "Schedule" | trans }},{{ "Process class" | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter,#text_filter");
    myGrid.setInitWidths("100,*,200,250,150,*,*,200,200,200");
    myGrid.setColAlign("left,left,left,left,center,left,left,right,left,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.enableContextMenu(myGridMenu);
    myGrid.enableAlterCss("","");
    myGrid.init();
    myGrid.load( "{{ url('xml_JOC_jobs_grid') }}?chained="+chained+"&only_warning="+only_warning );
    myGrid.setColumnHidden(3,true); 
    myGrid.setColumnHidden(7,true); 
    myGrid.setColumnHidden(8,true); 
    myGrid.setColumnHidden(9,true); 

    myTabbar = globalLayout.cells("c").attachTabbar();
    myTabbar.addTab("job","{{ "Job" | trans }}","120px", null, true);
    myTabbar.addTab("tasks","{{ "Tasks" | trans }}","120px");
    myGrid.attachEvent("onRowDblClicked", JobDetail );

    myDetailLayout = myTabbar.cells("job").attachLayout("2U");
    myDetailLayout.cells("a").hideHeader(); 
    myDetailLayout.cells("b").hideHeader(); 
    myDetailLayout.cells("a").setWidth(700); 

    myForm = myDetailLayout.cells("a").attachForm();
    myForm.loadStruct("{{ url('json_JOC_jobs_form') }}");
{% if is_granted('ROLE_OPERATOR') %}
    myDetailToolbar = myDetailLayout.cells("a").attachToolbar();
    myDetailToolbar.setIconsPath("{{ asset('/images/') }}");
    myDetailToolbar.loadStruct( "{{ url('xml_JOC_jobs_form_toolbar') }}" , function(){
        GBCalendar = new dhtmlXCalendarObject(myDetailToolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });
    myParametersToolbar = myDetailLayout.cells("b").attachToolbar();
    myParametersToolbar.setIconsPath("{{ asset('/images/') }}");
    myParametersToolbar.loadStruct("{{ url('xml_JOC_job_params_toolbar') }}");
{% endif %}    

    myParameters = myDetailLayout.cells("b").attachGrid();
    myParameters.selMultiRows = true;
    myParameters.setHeader("{{ "Parameter" | trans }},{{ "Value" | trans }}");
    myParameters.setColTypes("ed,ed");
    myParameters.setInitWidths("200,*");
    myParameters.init();
    
{% if is_granted('ROLE_OPERATOR') %}
    myDetailToolbar.attachEvent("onClick",function(itemid){
        Text = '';
        var id = myForm.getItemValue('ID');
        if (id=='') return false;
        
        switch(itemid) {
            case "start_job":
                Text = "{{ "Start job" | trans }}";
                break;
            case "stop_job":
                Text = "{{ "Stop job" | trans }}";
                break;
            case "resume_job":
                Text = "{{ "Resume job" | trans }}";
                break;
            default:
                alert(itemid);
        }
        switch(itemid) {
            case "start_job":
            case "stop_job":
            case "unstop_job":
            case "resume_job":
                var params = new Array();
                myParameters.forEachRow(function(id){
                    var param = myParameters.cells(id,0).getValue() + "=" + encodeURIComponent(myParameters.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                start_time = myDetailToolbar.getValue("ref_date");
                // alert("{{ url('arii_JOC_command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&id="+id); 
                dhtmlx.message({
                type: "Notice",
                text: Text });
                globalLayout.cells("b").progressOn();     
                // alert("{{ url('arii_JOC_command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&id="+id);
                dhx4.ajax.post("{{ url('arii_JOC_command') }}","command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    globalLayout.cells("b").progressOff();        
                    globalLayout.cells("a").progressOn();        
                    // internal refresh
                    spooler_id = myForm.getItemValue('SPOOLER_ID');
                    // alert("{{ url('arii_JOC_sync') }}?id="+spooler_id);
                    dhx4.ajax.post("{{ url('arii_JOC_sync') }}","id="+spooler_id,function(loader,response){
                        dhtmlx.message({
                        type: "Notice",
                        expire: 10000,
                        width: "500px",
                        text: loader.xmlDoc.responseText });                  
                        GlobalRefresh();
                    });
                    globalLayout.cells("a").progressOff();        
                });
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });
{% endif %}
    myTasks =  myTabbar.cells("tasks").attachGrid();
    myTasks.setImagePath( "{{ asset('/images/') }}");
    myTasks.setHeader("{{ "PID" | trans }},{{ "State" | trans }},{{ "Start" | trans }},{{ "Queued" | trans }},{{ "Cause" | trans }}");
    myTasks.attachHeader("#select_filter,#text_filter,#text_filter,#text_filter,#select_filter");
    myTasks.setInitWidths("100,*,200,250,150");
    myTasks.setColAlign("left,left,left,left,center");
    myTasks.setColTypes("ro,ro,ro,ro,ro");
    myTasks.enableAlterCss("","");
    myTasks.init();

    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        job = myGrid.cells(rId,1).getValue();
        switch (menuitemId) {
           case "job_history":
                document.location.href = "{{ url('arii_ATS_job_history') }}?joid="+rId;
            break;
            default:
                alert("inconnu ! "+menuitemId);    
        }
        return true;
    });

    autorefresh = setInterval( "GridRefresh()",update*1000);
});

function GridRefresh() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    myRibbon.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    myGrid.load( "{{ url('xml_JOC_jobs_grid') }}?chained="+chained+"&only_warning="+only_warning, function () {
        myGrid.refreshFilters();
        myGrid.filterByAll();
        globalLayout.cells("b").progressOff();
        myDonut.load( "{{ url('xml_JOC_jobs_pie') }}?chained="+chained+"&only_warning="+only_warning, function () {
            myDonut.refresh();
            globalLayout.progressOff();
            if (job>0) JobDetail(job);
        });        
    });
}

function GlobalRefresh() {
    GridRefresh(); 
}

function JobDetail(id) {
    job = id;
    myDetailLayout.cells("a").progressOn();
    myDetailLayout.cells("b").progressOn();
    myForm.load("{{ url('xml_JOC_job_form') }}?id="+id, function () {
        myDetailLayout.cells("a").progressOff();
        myParameters.load("{{ url('xml_JOC_job_params') }}?id="+id, function() {    
            myTasks.load("{{ url('xml_JOC_job_tasks') }}?id="+id, function() {
                myDetailLayout.cells("b").progressOff();                
            });
        });
    });
}

/* Gestion du menu contextuel */
function onButtonClick(menuitemId, type) {
    var data = myGrid.contextID.split("_");
    //rowInd_colInd;
    var rId = data[0];
    var cInd = data[1];
//     myGrid.setRowTextStyle(data[0], "color:" + menuitemId.split("_")[1]);
    // alert("rId "+rId+" cInd "+cInd);
    switch (menuitemId) {
 
       case "show_info":
            JobInfo( rId );
        break;        
       case "show_history":
            JobHistory( rId );
        break;        
        case "start_task":
            StartJob( rId );
        break;
        case "kill":
            KillJob( rId );
        break;
        case "stop":
            StopJob( rId );
        break;
        case "unstop":
            UnstopJob( rId );
        break;
        default:
            alert(menuitemId);    
    }
    return true;
}

function onShowMenu(rowId, celInd, grid) {
    // Cas du spooler
    if (grid.getUserData(rowId, "type" )=='spooler') {
        menu.setItemDisabled("start_task");
        menu.setItemDisabled("show_history");
        menu.setItemDisabled("stop");
        menu.setItemDisabled("unstop");
        menu.setItemDisabled("kill");
        return true;
    }
        
    var status = grid.cells(rowId, 2 ).getValue();
    menu.showItem("start_task");
    menu.showItem("stop");
    menu.showItem("show_history");
    menu.setItemDisabled("kill");
    menu.setItemDisabled("unstop");
    
    switch (status) {
    case 'SUCCESS':
        menu.setItemEnabled('show_history');
        menu.setItemEnabled('start_task');
        menu.setItemEnabled('stop');
        menu.setItemDisabled('kill');
        menu.setItemDisabled('unstop');
        break;
    case 'FAILURE':
        break;
    case 'RUNNING':
        // rien du tout, c'est instancie
        return false;
        break;
    case '':
        return false;
        break;
    case 'STOPPED':
        menu.setItemEnabled('show_history');
        menu.setItemEnabled('start_task');
        menu.setItemEnabled("unstop");
        menu.setItemDisabled("stop");
        break;
    default:
        // Cas de l'instance
        if (grid.getUserData(rowId, "jobtype" )=='instance') {
            // on ne demarre pas une tache RUNNING
            menu.setItemDisabled("start_task");
            menu.setItemEnabled("kill");
            // Un job running ne peut pas avoir d'historique
            menu.setItemDisabled("show_history");
        }
        break;
    }
    // Un job ordonné ne peut être démarré 
    if (grid.getUserData(rowId, "jobtype" )=='ordered_job') {
        menu.setItemDisabled("start_task");
    }
   
return true;
}
</script>

{% endblock %}
