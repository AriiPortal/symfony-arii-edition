<?php

namespace Arii\MFTBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DeliveriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveriesRepository extends EntityRepository
{
    public function findDeliveries($Filter=[]) { 
        $q = $this->createQueryBuilder('e')
        ->select( 'e.id,'
                . 'tt.name as transfer_name,tt.title as transfer_title,'
                . 'o.name as operation_name,o.title as operation_title,'
                . 'e.run,e.try,e.start_time,e.end_time,e.duration,e.status,e.status_text,e.files_count,e.files_size,e.success,e.skipped,e.failed,e.last_error,'
                . '(e.operation) as operation_id,(e.history) as history_id,'
                . 's.host as source_host,s.login as source_login,s.protocol as source_protocol,'
                . 't.host as target_host,t.login as target_login,t.protocol as target_protocol' )
        ->leftjoin('AriiMFTBundle:Operations','o',\Doctrine\ORM\Query\Expr\Join::WITH,'e.operation = o.id')                
        ->leftjoin('AriiMFTBundle:Transfers','tt',\Doctrine\ORM\Query\Expr\Join::WITH,'o.transfer = tt.id')                
        ->leftjoin('AriiCoreBundle:Connection','s',\Doctrine\ORM\Query\Expr\Join::WITH,'o.source = s.id')                
        ->leftjoin('AriiCoreBundle:Connection','t',\Doctrine\ORM\Query\Expr\Join::WITH,'o.target = t.id')                
        ->orderBy('e.start_time','desc')
        ->setMaxResults(1000);
        # Filtrage
        if (isset($Filter['source_host']))
            $q->andWhere('s.host = :sourceHost')
                ->setParameter('sourceHost',$Filter['source_host']);           
        if (isset($Filter['target_host']))
            $q->andWhere('t.host = :targetHost')
                ->setParameter('targetHost',$Filter['target_host']);           
        return $q->getQuery()->getResult();
    }

    # Echenge par transfers
    public function findFlows($Filter=[]) {
        $q = $this->createQueryBuilder('e')
        ->select( 'p.name as partner_name,'
                . 'tt.name as transfer_name,tt.title as transfer_title,'
                . 'o.env as environment,'
                . 's.host as source_host,t.host as target_host,'
                . 'min(e.start_time) as start_time_min,max(e.end_time) as end_time_max,'
                . '(max(e.end_time)-min(e.start_time)) as days,'
                . 'count(e) as runs,'
                . 'avg(e.files_count) as files_count_avg,avg(e.files_size) as files_size_avg,avg(e.success) as success_avg,avg(e.skipped) as skipped_avg,avg(e.failed) as failed_avg,'
                . 'sum(e.files_count) as files_count_sum,sum(e.files_size) as files_size_sum,sum(e.success) as success_sum,sum(e.skipped) as skipped_sum,sum(e.failed) as failed_sum,'
                . 'min(e.files_count) as files_count_min,min(e.files_size) as files_size_min,min(e.success) as success_min,min(e.skipped) as skipped_min,min(e.failed) as failed_min,'
                . 'max(e.files_count) as files_count_max,max(e.files_size) as files_size_max,max(e.success) as success_max,max(e.skipped) as skipped_max,max(e.failed) as failed_max'
        )
        ->leftjoin('AriiMFTBundle:Operations','o',\Doctrine\ORM\Query\Expr\Join::WITH,'e.operation = o.id')                
        ->leftjoin('AriiMFTBundle:Transfers','tt',\Doctrine\ORM\Query\Expr\Join::WITH,'o.transfer = tt.id')                
        ->leftjoin('AriiMFTBundle:Partners','p',\Doctrine\ORM\Query\Expr\Join::WITH,'tt.partner = p.id')                
        ->leftjoin('AriiCoreBundle:Connection','s',\Doctrine\ORM\Query\Expr\Join::WITH,'o.source = s.id')                
        ->leftjoin('AriiCoreBundle:Connection','t',\Doctrine\ORM\Query\Expr\Join::WITH,'o.target = t.id')     
        ->groupBy('p.name,tt.name,tt.title,s.host,t.host,o.env')
        ->orderBy('p.name,tt.name','desc')
        ->setMaxResults(1000);
        # Filtrage
        if (isset($Filter['environment']))
            $q->andWhere('o.env = :environment')
                ->setParameter('environment',$Filter['environment']);           
        if (isset($Filter['source_host']))
            $q->andWhere('s.host = :sourceHost')
                ->setParameter('sourceHost',$Filter['source_host']);           
        if (isset($Filter['target_host']))
            $q->andWhere('t.host = :targetHost')
                ->setParameter('targetHost',$Filter['target_host']);      
/*
        print $q->getQuery()->getSql();
        print_r( $q->getQuery()->getParameters());
        exit();
*/        
        return $q->getQuery()->getResult();
    }
    
}
