{% extends "AriiMFTBundle::layout.html.twig" %}
{% block body %}
<script>
var cron=-1;
var update=30;
var autorefresh;
dhtmlxEvent(window,"load",function(){ 
    globalLayout = new dhtmlXLayoutObject(document.body,"3L");
    globalLayout.cells("a").hideHeader();
    globalLayout.cells("a").setWidth(400);
    globalLayout.cells("b").hideHeader();
    globalLayout.cells("c").hideHeader();
    globalLayout.cells("c").collapse();
    globalLayout.cells("c").setText("{{ "History" | trans }}");
        
    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/images/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/images/') }}" );
    myRibbon.loadStruct("{{ url('json_MFT_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
/*    
    myGridMenu = new dhtmlXMenuObject(null);
    myGridMenu.setIconsPath( "{{ asset('/images/') }}" );
    myGridMenu.renderAsContextMenu();
    myGridMenu.loadStruct("{{ url('xml_filter_menu') }}");
*/
    myGrid = globalLayout.cells("a").attachGrid();
    myGrid.selMultiRows = true;
    myGrid.setImagePath( "{{ asset('/images/') }}");
    myGrid.setHeader("{{ "Name" | trans }},{{ "Next start" | trans }}");
    myGrid.attachHeader("#text_filter,#text_filter");
    myGrid.setInitWidths("*,150");
    myGrid.setColAlign("left,left");
    myGrid.setColTypes("ro,ro");
    myGrid.setColSorting("str,date");
    // myGrid.enableContextMenu(myGridMenu);
    myGrid.init();
    myGrid.load( "{{ url('xml_MFT_schedules_list') }}" );
    myGrid.attachEvent("onRowDblClicked", function (rid) {
        EditCron(rid);
    });
    
    
    myFormToolbar = globalLayout.cells("b").attachToolbar();
    myFormToolbar.setIconsPath("{{ asset('/images/') }}");
    myFormToolbar.loadStruct("{{ url('xml_MFT_schedules_toolbar') }}");
    
    formData = [
       { type: "settings", position: "label-left", labelWidth: 100, inputWidth: 240, labelAlign: "right", readonly: 1, position: "label-left" },
             {type:"hidden", name: 'id' },
            {type:"input", name: 'NAME', label:'{{ 'Name' | trans }}', required: true },
            {type:"input", name: 'TITLE', label:'{{ 'Title' | trans }}' },
            {type:"input", name: 'DESCRIPTION', label:'{{ 'Description' | trans }}', rows: 4},
            {type:"input", name: 'NEXT_RUN', label:'{{ 'Next run' | trans }}', value: ''},
            {type:"newcolumn"},
            {type:"input", name: 'MINUTES', label:'{{ 'Minutes' | trans }}', value: '*' },
            {type:"input", name: 'HOURS', label:'{{ 'Hours' | trans }}', value: '*' },
            {type:"input", name: 'MONTH_DAYS', label:'{{ 'Days of month' | trans }}', value: '*' },
            {type:"input", name: 'WEEK_DAYS', label:'{{ 'Days of week' | trans }}', value: '*' },
            {type:"input", name: 'MONTHS', label:'{{ 'Months' | trans }}', value: '*' },
            {type:"input", name: 'YEARS', label:'{{ 'Years' | trans }}', value: '*'},
            {type:"hidden", name: 'STATUS', label:'{{ 'Status' | trans }}', value: ''},
            {type:"hidden", name: 'CHANGE_USER', label:'{{ 'Change user' | trans }}', value: ''},
            {type:"hidden", name: 'CHANGE_TIME', label:'{{ 'Change time' | trans }}', value: ''}
            
        ];
    
    myForm = globalLayout.cells("b").attachForm(formData);
    myForm.enableLiveValidation(true);
    
    myFormToolbar.attachEvent("onClick", function (id,value) {
        switch (id) {
            case "save":
                if(myForm.validate()){
                    globalLayout.cells("b").progressOn();
                    myForm.send("{{ url('xml_MFT_schedules_save') }}","POST",function(loader,response){
                    if(response === "success")
                        {
                            dhtmlx.message({
                                title:"Save",
                                type: "Notice",
                                lifetime: "60000",
                                text: "{{ "Schedule saved" | trans }}"
                            });
                        } else
                        {
                            alert(response);
                        }
                        GlobalRefresh();
                        globalLayout.cells("b").progressOff();
                    });
                }
            break;
            case "add":
                myForm.clear();
            break;
            case "delete":
                    id = myForm.getItemValue("id");
                    DeleteCron(id);
            break;
            default:
                alert(id);
                break;
        }
    });
/*
    myGridMenu.attachEvent("onClick", function (menuitemId, type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        spooler = myGrid.cells(rId,0).getValue();
        switch (menuitemId) {
           case "add_filter":
                NewCron();
                break;
            case "delete_filter":
                myForm.setItemValue("id",'');
                DeleteCron(rId);
                break;
            default:
                alert("inconnu ! "+menuitemId);    
        }
        return true;
    });
*/
    myTransfers = globalLayout.cells("c").attachGrid();
    myTransfers.selMultiRows = true;
    myTransfers.setImagePath( "{{ asset('/images/') }}");
    myTransfers.setHeader("{{ "Done" | trans }},{{ "Status" | trans }},{{ "Duration" | trans }},{{ "Message" | trans }}");
    myTransfers.attachHeader("#text_filter,#select_filter,#text_filter,#text_filter");
    myTransfers.setInitWidths("150,100,100,*");
    myTransfers.setColAlign("right,left,right,left");
    myTransfers.setColTypes("ro,ro,ro,ro");
    myTransfers.setColSorting("date,str,int,str");
    // myGrid.enableContextMenu(myGridMenu);
    myTransfers.init();

    autorefresh = setInterval( "GlobalRefresh()",update*1000);
});

function NewCron() {
    myForm.clear();
    myForm.setItemFocus("name");
    myForm.setItemLabel("fieldset","{{ "New filter" | trans }}");
}

function EditCron(id) {
    cron=id;
    globalLayout.cells("b").progressOn();
    myForm.setItemLabel("fieldset","{{ "Edit filter" | trans }}");
    myForm.clear();
    myForm.load("{{ url('xml_MFT_schedules_form') }}?id="+id, function () {
        globalLayout.cells("b").progressOff();
        globalLayout.cells("c").progressOn();
        globalLayout.cells("c").expand();
        myTransfers.load( "{{ url('xml_MFT_schedules_transfers') }}?id="+id, function () {
            globalLayout.cells("c").progressOff();
        });        
    });
}

function DeleteCron(id) {
    // On edite pour sauvegarder
    globalLayout.cells("b").progressOn();
    EditCron(id);
    dhtmlx.confirm({
     title: "{{ "Delete cron" | trans }}",
     type: "confirm-error",
     text: '{{ "Do you confirm the suppression ?" | trans }}',
     callback: function(answer) { if (answer) {
               myForm.send("{{ url('xml_MFT_schedules_delete') }}","POST",function(loader,response){
               if(response === "success")
               {
                 dhtmlx.message({
                    title:"{{ "Save" | trans }}",
                    type: "Notice",
                    lifetime: "60000",
                    text: "{{ "Cron deleted" | trans }}"
                 });
               }
               else 
               {
                 dhtmlx.message({
                    title:"{{ "Delete" | trans }}",
                    type: "error",
                    lifetime: "60000",
                    text: response
                 });
               }
                    globalLayout.cells("b").progressOff();
                    GlobalRefresh();
                })
        }
    },
     cancel: "{{ "No" | trans }}",
     ok: "{{ "Yes" | trans }}" });
 }
 
function GlobalRefresh() {
    myGrid.load("{{ url('xml_MFT_schedules_list') }}", function () {
        myTransfers.load("{{ url('xml_MFT_schedules_transfers') }}?id="+cron, function () {            
        });      
    });
}
</script>
{% endblock %}
