<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * JOBDayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JOBDayRepository extends EntityRepository
{
    
   public function findApps($start,$end,$env='*',$class='*',$detail=false)
   {
        $Filter = [ 'job.app' ];
        if ($detail) {
            if ($env=='*')
                array_push($Filter,'job.env');
            if ($class=='*')
                array_push($Filter,'job.job_class');
        }

        //crÃ©ation de l'expression OR
        $qb = $this->createQueryBuilder('job');
        
        $f = implode(',',$Filter);
        $qb = $qb->Select($f.',max(job.jobs) as jobs,sum(job.created) as created,sum(job.deleted) as deleted')
            ->where('job.date >= :start')
            ->groupBy($f)
            ->orderBy('job.app','ASC')
            ->setParameter('start', $start);
        
        if (0) {
            $query = $qb->getQuery();
            print $query->getSQL();
            print_r($query->getParameters());
            exit();
        }
        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);
        if ($class!='*')
            $qb->andWhere('job.job_class = :class')
                 ->setParameter('class', $class);
        
        return $qb->getQuery()
             ->getResult();
   }   
    
   public function findJobsByDay($day, $env='P', $app='*', $job_class='*')
   {
       if ($app=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('job.date,sum(job.jobs) as jobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->groupBy('job.date')
                 ->orderBy('job.date')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->getQuery()
                 ->getResult();
       }
       else {
            return $this->createQueryBuilder('job')
                 ->Select('job.date,job.app,job.jobs,job.created,job.deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->andWhere('job.app = :app')
                 ->orderBy('job.date')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
   }
    
   public function findJobsMonth()
   {
        $driver = $this->_em->getConnection()->getDriver()->getName();
        switch ($driver) {
            case 'oci8':
                $sql = "SELECT EXTRACT(YEAR FROM job.job_date) as job_year,EXTRACT(MONTH FROM job.job_date) as job_month,job.app,job.env,job.spooler_type,job.spooler_name,max(job.jobs) as jobs,max(job.created) as created,max(job.deleted) as deleted
                        FROM REPORT_JOB_DAY job
                        GROUP BY EXTRACT(YEAR FROM job.job_date),EXTRACT(MONTH FROM job.job_date),job.app,job.env,job.spooler_type,job.spooler_name";

                $rsm = new ResultSetMapping();
                $rsm->addScalarResult('JOB_YEAR', 'year');
                $rsm->addScalarResult('JOB_MONTH', 'month');
                $rsm->addScalarResult('APPLICATION', 'app');
                $rsm->addScalarResult('ENV', 'env');
                $rsm->addScalarResult('SPOOLER_TYPE', 'spooler_type');
                $rsm->addScalarResult('SPOOLER_NAME', 'spooler_name');
                $rsm->addScalarResult('JOBS', 'jobs');
                $rsm->addScalarResult('CREATED', 'created');
                $rsm->addScalarResult('DELETED', 'deleted');
                $query = $this->_em->createNativeQuery($sql, $rsm);
                return $query->getResult();         
                break;
            default:
                return $this->createQueryBuilder('job')
                      ->Select('Year(job.date) as year,Month(job.date) as month,job.app,job.env,job.spooler_type,job.spooler_name,max(job.jobs) as jobs,max(job.created) as created,max(job.deleted) as deleted')
                      ->groupBy('year,month,job.app,job.env,job.spooler_type,job.spooler_name')
                      ->getQuery()
                      ->getResult();
                break;
        }       
   }
   
   public function findJobsByMonth(\DateTime $start, \DateTime $end, $env='P', $app='*')
   {
       if (($app=='*') and ($env=='*')) {
           return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->groupBy('annee,mois')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->getQuery()
                 ->getResult();
       }
       elseif ($app=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->groupBy('annee,mois,job.env')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->getQuery()
                 ->getResult();
       }
       elseif ($env=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.app = :app')
                 ->groupBy('annee,mois,job.app')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
       else {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->andWhere('job.app = :app')
                 ->groupBy('annee,mois')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
   }

   public function findLast()
   {
        return $this->createQueryBuilder('job')
            ->Select('count(job) as NB,max(job.date) as lastUpdate')
            ->getQuery()
            ->getResult();
   }
   
}