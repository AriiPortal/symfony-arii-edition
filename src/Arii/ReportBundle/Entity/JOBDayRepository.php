<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * JOBDayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JOBDayRepository extends EntityRepository
{
   // Somme des jobs pour une application
   public function findApps($start,$end,$env='*',$class='*',$detail=false, $sort='job.app', $order='ASC' )
   {
        $group = 'job.date,job.app';
        if ($detail)
            $group .= ',job.env';
        else {
            if ($env!='*')
                $group .= ',job.env';                     
            if ($class!='*')
                $group .= ',job.job_class';   
        }
        
        //crÃ©ation de l'expression OR
        $qb = $this->createQueryBuilder('job');
        
        $qb = $qb->Select($group.',sum(job.jobs) as jobs,sum(job.created) as created,sum(job.deleted) as deleted')
            ->where('job.date >= :start')
            ->andWhere('job.date <= :end')                
            ->groupBy($group)
            ->orderBy($sort,$order)
            ->setParameter('start', $start)
            ->setParameter('end', $end);
        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);
        if ($class!='*')
            $qb->andWhere('job.job_class = :class')
                 ->setParameter('class', $class);
        // $this->Debug($qb);  
        return $qb->getQuery()
             ->getResult();
   }   
   
   private function Debug($qb) {
        $query = $qb->getQuery();
        print $query->getSQL();
        print_r($query->getParameters());
        exit();
   }
   // Jobs pour une application
   public function findJobs($start,$end,$env='P',$app='*',$job_class='*',$detail=false,$sort='*',$order='ASC')
   {
        $group = 'job.date';
        if ($detail)
            $group .= ',job.env,job.app,job.job_class';
        else {
            if ($env!='*')
                $group .= ',job.env';            
            if ($app!='*')
                $group .= ',job.app';            
            if ($job_class!='*')
                $group .= ',job.job_class';            
        }
        if ($sort=='*') $sort=$group;
        $qb = $this->createQueryBuilder('job')
            ->Select($group.',sum(job.jobs) as jobs,sum(job.created) as created,sum(job.deleted) as deleted')
            ->where('job.date >= :start')
            ->andWhere('job.date <= :end')
            ->groupBy($group)
            ->orderBy($sort,$order)
            ->setParameter('start', $start)
            ->setParameter('end', $end);
        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);
        if ($app!='*')
            $qb->andWhere('job.app = :app') 
                ->setParameter('app', $app);
        if ($job_class!='*')
            $qb->andWhere('job.job_class = :class')
                 ->setParameter('class', $job_class);
        // $this->Debug($qb); 
        
        return $qb->getQuery()
            ->getResult();
   }
   
   public function findJobsMonth()
   {
        $driver = $this->_em->getConnection()->getDriver()->getName();
        switch ($driver) {
            case 'oci8':
                $sql = "SELECT EXTRACT(YEAR FROM job.job_date) as job_year,EXTRACT(MONTH FROM job.job_date) as job_month,job.app,job.env,job.job_class,job.spooler_name,max(job.jobs) as jobs,max(job.created) as created,max(job.deleted) as deleted
                        FROM REPORT_JOB_DAY job
                        GROUP BY EXTRACT(YEAR FROM job.job_date),EXTRACT(MONTH FROM job.job_date),job.app,job.env,job.job_class,job.spooler_name";
                $rsm = new ResultSetMapping();
                $rsm->addScalarResult('JOB_YEAR', 'year');
                $rsm->addScalarResult('JOB_MONTH', 'month');
                $rsm->addScalarResult('APP', 'app');
                $rsm->addScalarResult('ENV', 'env');
                $rsm->addScalarResult('JOB_CLASS', 'job_class');
                $rsm->addScalarResult('SPOOLER_NAME', 'spooler_name');
                $rsm->addScalarResult('JOBS', 'jobs');
                $rsm->addScalarResult('CREATED', 'created');
                $rsm->addScalarResult('DELETED', 'deleted');
                $query = $this->_em->createNativeQuery($sql, $rsm);
                return $query->getResult();         
                break;
            default:
                return $this->createQueryBuilder('job')
                      ->Select("Year(job.date) as year,Month(job.date) as month,job.app,job.env,job.job_class,job.spooler_name,max(job.jobs) as jobs,max(job.created) as created,max(job.deleted) as deleted")
                      ->groupBy('year,month,job.app,job.env,job.spooler_name')
                      ->getQuery()
                      ->getResult();
                break;
        }       
   }
   
   public function findJobsByMonth(\DateTime $start, \DateTime $end, $env='P', $app='*')
   {
       if (($app=='*') and ($env=='*')) {
           return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->groupBy('annee,mois')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->getQuery()
                 ->getResult();
       }
       elseif ($app=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->groupBy('annee,mois,job.env')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->getQuery()
                 ->getResult();
       }
       elseif ($env=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.app = :app')
                 ->groupBy('annee,mois,job.app')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
       else {
            return $this->createQueryBuilder('job')
                 ->Select('Year(job.date) as annee,Month(job.date) as mois,job.app,job.env,max(job.jobs) as jobs,min(job.jobs) as minjobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.date >= :start')
                 ->andWhere('job.date <= :end')
                 ->andWhere('job.env = :env')
                 ->andWhere('job.app = :app')
                 ->groupBy('annee,mois')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
   }

   public function findLast()
   {
        return $this->createQueryBuilder('job')
            ->Select('count(job) as NB,max(job.date) as lastUpdate')
            ->getQuery()
            ->getResult();
   }
   
}