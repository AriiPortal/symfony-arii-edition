<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * JOBMonthRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JOBMonthRepository extends EntityRepository
{

   // Liste des applications 
   public function findApps($year,$month,$env='*',$class='*')
   {
        $Filter = [ 'job.app' ];
/* Pour le detail
        if ($env=='*')
            array_push($Filter,'job.env');
        if ($class=='*')
            array_push($Filter,'job.job_class');
*/        
        $f = implode(',',$Filter);
        $qb = $this->createQueryBuilder('job')
             ->Select($f.',sum(job.jobs) as jobs')
             ->where('job.year = :year')
             ->andWhere('job.month = :month')                
             ->groupBy($f)
             ->orderBy('job.app','ASC')
             ->setParameter('year', $year)
             ->setParameter('month', $month);
        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);        
        if ($class!='*')
            $qb->andWhere('job.job_class = :class')
                 ->setParameter('class', $class);
        
        return $qb->getQuery()
             ->getResult();
   }   
   
    
   public function findJobsByMonth($start, $end, $env='P', $app='*')
   {
       if ($app=='*') {
            return $this->createQueryBuilder('job')
                 ->Select('job.year,job.month,sum(job.jobs) as jobs,sum(job.created) as created,sum(job.deleted) as deleted')
                 ->where('job.year*100+job.month >= :start')
                 ->andWhere('job.year*100+job.month <= :end')
                 ->andWhere('job.env = :env')
                 ->groupBy('job.year,job.month')
                 ->orderBy('job.year,job.month')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->getQuery()
                 ->getResult();
       }
       else {
            return $this->createQueryBuilder('job')
                 ->Select('job.year,job.month,job.app,job.jobs,job.created,job.deleted')
                 ->where('job.year*100+job.month >= :start')
                 ->andWhere('job.year*100+job.month <= :end')
                 ->andWhere('job.env = :env')
                 ->andWhere('job.app = :app')
                 ->orderBy('job.year,job.month')
                 ->setParameter('start', $start)
                 ->setParameter('end', $end)
                 ->setParameter('env', $env)
                 ->setParameter('app', $app)
                 ->getQuery()
                 ->getResult();
       }
   }

   public function findAppsByMonths($start,$end, $env='P')
   {
        if ($env=='*') {
            $qb = $this->createQueryBuilder('job')
                ->Select('job.year,job.month,job.app,job.jobs,job.created,job.deleted')
                 ->where('(job.year*100+job.month) >= :start')
                 ->andWhere('(job.year*100+job.month) <= :end')
                ->orderBy('job.year,job.month,job.app,job.jobs','DESC')
                ->setParameter('start', $start)
                ->setParameter('end', $end);
                /*
                        $query = $qb->getQuery();
                        print $query->getSQL();
                        print_r($query->getParameters());
                        exit();
                */
        }
        else {
            $qb = $this->createQueryBuilder('job')
                ->Select('job.year,job.month,job.app,job.jobs,job.created,job.deleted')
                 ->where('(job.year*100+job.month) >= :start')
                 ->andWhere('(job.year*100+job.month) <= :end')
                ->andWhere('job.env = :env')                        
                ->orderBy('job.year,job.month,job.app,job.jobs','DESC')
                ->setParameter('start', $start)
                ->setParameter('end', $end)            
                ->setParameter('env', $env);
        }
        return $qb->getQuery()
                ->getResult();
   }
   
}