<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\DBAL\Query\QueryBuilder;

/**
 * JOBRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JOBRepository extends EntityRepository
{
   // Liste des applications 
   public function findApps($start,$end,$env='*',$class='*',$detail=false)
   {
        $Filter = [ 'job.app' ];
        if ($detail) {
            if ($env=='*')
                array_push($Filter,'job.env');
            if ($class=='*')
                array_push($Filter,'job.job_class');
        }

        $f = implode(',',$Filter);
        $qb = $this->createQueryBuilder('job')
            ->Select($f.',count(job.date) as jobs,count(job.created) as created,count(job.deleted) as deleted')
            ->where('job.created <= :end')
            ->andWhere('((job.deleted is null) OR (job.deleted >= :start))')
             ->groupBy($f)
             ->orderBy('job.app','ASC')
             ->setParameter('start', $start)
             ->setParameter('end', $end);
        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);        
        if ($class!='*')
            $qb->andWhere('job.job_class = :class')
                 ->setParameter('class', $class);
        
        return $qb->getQuery()
             ->getResult();
   }

   // Liste des environnements 
   public function findEnv($start,$end,$app='*',$job_class='*')
   {
        //création de l'expression OR
        $qb = $this->createQueryBuilder('job')
            ->Select('job.env,count(job) as envs')
            ->where('job.created <= :start')
            ->andWhere('job.deleted is null OR job.deleted >= :end')
            ->groupBy('job.env')
            ->orderBy('job.env','ASC')
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        if ($app!='*')
            $qb->andWhere('job.app = :app')
                 ->setParameter('app', $app);

        if ($job_class!='*')
            $qb->andWhere('job.job_class = :job_class')
                 ->setParameter('job_class', $job_class);
        
        return $qb->getQuery()
             ->getResult();
   }

   // Liste des applications 
   public function findApp($start,$end,$env='*',$job_class='*')
   {
        $qb = $this->createQueryBuilder('job')
            ->Select('job.app,count(job) as apps')
            ->where('job.created <= :end')
            ->andWhere('(job.deleted is null OR job.deleted >= :start)')
            ->groupBy('job.app')
            ->orderBy('job.app','ASC')
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);
        if ($job_class!='*')
            $qb->andWhere('job.job_class = :job_class')
                 ->setParameter('job_class', $job_class);

        return $qb->getQuery()
             ->getResult();
   }

   // Liste des classes de job
   public function findJcl( $start,$end,$env='*')
   {
        //création de l'expression OR
        $qb = $this->createQueryBuilder('job')
            ->Select('job.job_class as jcl,count(job) as jcls')
            ->where('job.created <= :start')
            ->andWhere('job.deleted is null OR job.deleted >= :end')
            ->groupBy('job.job_class')
            ->orderBy('job.job_class','ASC')
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);

        return $qb->getQuery()
             ->getResult();
   }

   // Liste des classes de job
   public function findSpool( $start,$end,$env='*',$app='*')
   {
        //création de l'expression OR
        $qb = $this->createQueryBuilder('job')
            ->Select('job.spooler_name as spooler,count(job) as spoolers')
            ->where('job.created <= :start')
            ->andWhere('job.deleted is null OR job.deleted >= :end')
            ->groupBy('job.spooler_name')
            ->orderBy('job.spooler_name','ASC')
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);

        return $qb->getQuery()
             ->getResult();
   }
   
   // Liste des domaines 
   public function findDom($start,$end,$env='*',$job_class='*')
   {
        //création de l'expression OR
        $qb = $this->createQueryBuilder('job')
            ->Select('cat.name as dom,cat.title as domain,count(job.id) as doms')
            ->leftJoin('Arii\CoreBundle\Entity\Application','app',\Doctrine\ORM\Query\Expr\Join::WITH,'job.app = app.name')                                
            ->leftJoin('Arii\CoreBundle\Entity\Category','cat',\Doctrine\ORM\Query\Expr\Join::WITH,'app.category = cat')                                
            ->where('job.created <= :start')
            ->andWhere('job.deleted is null OR job.deleted >= :end')
            ->andWhere('app.active = 1')
            ->groupBy('cat.name,cat.title')
            ->orderBy('cat.title','ASC')
            ->setParameter('start', $start)
            ->setParameter('end', $end);

        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);

        if ($job_class!='*')
            $qb->andWhere('job.job_class = :job_class')
                 ->setParameter('job_class', $job_class);
        
        return $qb->getQuery()
             ->getResult();
   }
   
   // Regroupement par jours
   public function findDates()
   {
        $driver = $this->_em->getConnection()->getDriver()->getName();
        switch ($driver) {
            case 'oci8':
                $sql = "SELECT TRUNC(job.created) as JOB_CREATED,TRUNC(job.updated) as JOB_UPDATED,TRUNC(job.deleted) as JOB_DELETED,job.spooler_name,job.app,job.env,job.job_class,count(*) as jobs
                        FROM REPORT_JOB job 
                        GROUP BY TRUNC(job.created),TRUNC(job.updated),TRUNC(job.deleted),job.spooler_name,job.app,job.env,job.job_class";

                $rsm = new ResultSetMapping();
                $rsm->addScalarResult('JOB_CREATED', 'created');
                $rsm->addScalarResult('JOB_UPDATED', 'updated');
                $rsm->addScalarResult('JOB_DELETED', 'deleted');
                $rsm->addScalarResult('ENV', 'env');
                $rsm->addScalarResult('APP', 'app');
                $rsm->addScalarResult('JOB_CLASS', 'job_class');
                $rsm->addScalarResult('SPOOLER_NAME', 'spooler_name');
                $rsm->addScalarResult('JOBS', 'jobs');
                $query = $this->_em->createNativeQuery($sql, $rsm);
                
                return $query->getResult();
                break;
            default:
                $qb = $this->createQueryBuilder('job')
                     ->Select('TRUNC(job.created),TRUNC(job.updated),TRUNC(job.deleted),job.spooler_name,job.app,job.env,job.job_class,count(job) as jobs')
                     ->groupBy('TRUNC(job.created),TRUNC(job.updated),TRUNC(job.deleted),job.spooler_name,job.app,job.env,job.job_class');
        }
        return $qb->getQuery()
             ->getResult();
   }   
      
   public function findFilters(\DateTime $start, \DateTime $end)
   {
        return $this->createQueryBuilder('job')
            ->Select('job.spooler_name,job.app,job.env,job.job_class')
            ->distinct(true)                
            ->where('job.last_execution >= :start')
            ->andWhere('job.last_execution <= :end')    
            ->orderBy('job.spooler_name,job.app,job.env,job.job_class')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery()
            ->getResult();
   }
   
   // Liste des jobs
   public function findJobs($start,$end,$env='*',$app='*',$job_class='*')
   {
        $qb = $this->createQueryBuilder('job')
            ->Select('job')
            ->Where('job.created < :start')
            ->andWhere('job.updated > :end')
            ->orderBy('job.job_name')
            ->setParameter('start', $start)
            ->setParameter('end', $end);
        
        if ($app!='*')
            $qb->andWhere('job.app = :app')
                 ->setParameter('app', $app);        
        if ($env!='*')
            $qb->andWhere('job.env = :env')
                 ->setParameter('env', $env);        
        if ($job_class!='*')
            $qb->andWhere('job.job_class = :job_class')
                 ->setParameter('job_class', $job_class);
        
        return $qb->getQuery()
                ->getResult();
   }

   // Trouver un job particulier         
   public function findJob($job_name,$command,$description)
   {
        $qb = $this->createQueryBuilder('job')
            ->Select('job.id,job.job_name,job.description,job.command')
            ->Where('job.job_name like :job_name')
            ->setParameter('job_name', ($job_name!=''?$job_name:'%') )
            ->orderBy('job.job_name');

        if ($description!='')
            $qb->andWhere('job.description like :description')
            ->setParameter('description', ($description!=''?$description:'%') );
        if ($command!='')        
            $qb->andWhere('job.command like :command')
            ->setParameter('command', ($command!=''?$command:'%') );

/*        
    $query = $qb->getQuery();
    print $query->getSQL();
    print_r($query->getParameters());
    exit();
*/        
            return $qb->getQuery()
                    ->getResult();
   }

   public function findCreationByMonth(\DateTime $time, $env='P')
   {
        return $this->createQueryBuilder('job')
            ->Select('SUBSTRING(job.created,1,7) as mois,job.app,job.env,count(job.id) as nb')
            ->where('job.created > :time')
            ->andWhere('job.env = :env')
            ->groupBy('mois','job.app','job.env')   
            ->setParameter('time', $time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }

   public function findEnvNull()
   {
        return $this->createQueryBuilder('job')
            ->Select('job')
            ->where('job.env is null')
            ->orWhere('job.app is null')
            ->orderBy('job.job_name')   
            ->getQuery()
            ->getResult();
   }
 
   public function findJobsByMonth()
   {       
        return $this->createQueryBuilder('run')
            ->Select('job.app_name,job.env,count(*) as nb,')
            ->groupBy('job.app_name,job.app_name,')
            ->orderBy('job.app_name')
            ->getQuery()
            ->getResult();
   }

   public function UpdateAppEnv($jobs,$app,$env)
   {
        $qb = $this->createQueryBuilder('job');
        //création de l'expression OR
        $orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->isNull('job.app'));
        $orModule->add($qb->expr()->isNull('job.env'));
        
        $q = $qb->update('Arii\ReportBundle\Entity\JOB','job')
            ->set('job.env',$qb->expr()->literal($env))
            ->set('job.app',$qb->expr()->literal($app))
            ->where('job.job_name like :jobs')
            ->andWhere($orModule)
            ->setParameter('jobs', $jobs)   
            ->getQuery();            
        return $q->execute();
   }
 
   public function findLast()
   {
        return $this->createQueryBuilder('job')
            ->Select('count(job) as NB,max(job.updated) as lastUpdate')
            ->getQuery()
            ->getResult();
   }
   
   public function findLastBySpooler()
   {
        return $this->createQueryBuilder('job')
            ->Select('job.spooler_name,count(job) as nb,max(job.updated) as last')
            ->groupBy('job.spooler_name')   
            ->orderBy('job.spooler_name')   
            ->getQuery()
            ->getResult();
   }

   public function findErrors()
   {
        $qb = $this->createQueryBuilder('job');
        //création de l'expression OR
        $orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->isNull('job.app'));
        $orModule->add($qb->expr()->isNull('job.env'));
        $orModule->add($qb->expr()->isNull('job.job_class'));

        $q = $qb->select('job')
            ->where($orModule)
            ->getQuery();    
        return $q->execute();
   }

}
