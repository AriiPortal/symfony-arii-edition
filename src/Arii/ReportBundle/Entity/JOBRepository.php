<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * JOBRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JOBRepository extends EntityRepository
{
    public function findJobs($job_name,$command,$description)
   {
        $query = $this->createQueryBuilder('job')
            ->Select('job.id,job.job_name,job.description,job.command')
            ->Where('job.job_name like :job_name')
            ->setParameter('job_name', ($job_name!=''?$job_name:'') )
            ->orderBy('job.job_name');
        
            return $query->getQuery()
                    ->getResult();
   }

   public function findApplications($time,$env='*')
   {       
       if (($env=='*') or ($env=='')) {
            return $this->createQueryBuilder('job')
                ->Select('job.app','app.title','count(job) as nb')
                ->leftJoin('Arii\CoreBundle\Entity\Application','app',\Doctrine\ORM\Query\Expr\Join::WITH,'job.app = app.name')                
                ->where('job.last_execution >= :time')
                ->groupBy('job.app,app.title')
                ->orderBy('nb','DESC')
                ->setParameter('time', $time)
                ->getQuery()
                ->getResult();
       }
       else {
            return $this->createQueryBuilder('job')
                ->Select('job.app','app.title','count(job) as nb')
                ->leftJoin('Arii\CoreBundle\Entity\Application','app',\Doctrine\ORM\Query\Expr\Join::WITH,'job.app = app.name')                
                ->where('job.last_execution >= :time')
                ->andWhere('job.env = :env')
                ->groupBy('job.app,app.title')
                ->orderBy('nb','DESC')
                ->setParameter('time', $time)
                ->setParameter('env', $env)
                ->getQuery()
                ->getResult();
       }
   }

   public function findCreationByMonth(\DateTime $time, $env='P')
   {
        return $this->createQueryBuilder('job')
            ->Select('SUBSTRING(job.created,1,7) as mois,job.app,job.env,count(job.id) as nb')
            ->where('job.created > :time')
            ->andWhere('job.env = :env')
            ->groupBy('mois','job.app','job.env')   
            ->setParameter('time', $time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }

   public function findEnvNull()
   {
        return $this->createQueryBuilder('job')
            ->Select('job')
            ->where('job.env is null')
            ->orWhere('job.app is null')
            ->orderBy('job.job_name')   
            ->getQuery()
            ->getResult();
   }
 
   public function findJobsByMonth()
   {       
        return $this->createQueryBuilder('run')
            ->Select('job.app_name,job.env,count(*) as nb,')
            ->groupBy('job.app_name,job.app_name,')
            ->orderBy('job.app_name')
            ->getQuery()
            ->getResult();
   }

   public function UpdateAppEnv($jobs,$app,$env)
   {
        $qb = $this->createQueryBuilder('job');
        //crÃ©ation de l'expression OR
        $orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->isNull('job.app'));
        $orModule->add($qb->expr()->isNull('job.env'));
        
        $q = $qb->update('Arii\ReportBundle\Entity\JOB','job')
            ->set('job.env',$qb->expr()->literal($env))
            ->set('job.app',$qb->expr()->literal($app))
            ->where('job.job_name like :jobs')
            ->andWhere($orModule)
            ->setParameter('jobs', $jobs)   
            ->getQuery();            
        return $q->execute();
   }
 
   public function findLast()
   {
        return $this->createQueryBuilder('job')
            ->Select('count(job) as NB,max(job.updated) as lastUpdate')
            ->getQuery()
            ->getResult();
   }
   
   public function findLastBySpooler()
   {
        return $this->createQueryBuilder('job')
            ->Select('job.spooler_type,job.spooler_name,count(job) as nb,max(job.updated) as last')
            ->groupBy('job.spooler_type,job.spooler_name')   
            ->orderBy('job.spooler_type,job.spooler_name')   
            ->getQuery()
            ->getResult();
   }
   
}
