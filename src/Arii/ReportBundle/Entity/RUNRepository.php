<?php

namespace Arii\ReportBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Doctrine\DBAL\Query\QueryBuilder;

/**
 * RUNRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RUNRepository extends EntityRepository
{

   public function findJobs(\DateTime $time, $app='%')
   {
        return $this->createQueryBuilder('run')
            ->Select('run.job_name,SUBSTRING(run.start_time,1,7) as mois,count(run) as nb')
            ->where('run.start_time > :time')
            ->groupBy('run.job_name','mois')
            ->setParameter('time', $time)
            ->getQuery()
            ->getResult();
   }
    
   public function findApplications(\DateTime $time, $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('run.app','count(run) as nb')
            ->where('run.start_time > :time')
            ->andWhere('run.env = :env')
            ->groupBy('run.app')
            ->setParameter('time', $time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }
   
   public function findAlarms(\DateTime $time, $app='%', $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('run.app','run.env','count(run) as nb')
            ->where('run.start_time > :time')
            ->andWhere('run.alarm is not null')
            ->andWhere('run.env = :env')
            ->groupBy('run.app','run.env')
            ->setParameter('time', $time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }

   public function findRunHours(\DateTime $from, \DateTime $to)
   {
/*       
        $qb = $this->createQueryBuilder('run')
            ->Select('DATE(run.start_time) as start_date,HOUR(run.start_time) as start_hour,run.env,run.app,run.spooler_name,run.alarm,count(run) as executions,count(run.alarm) as alarms,count(run.ack) as acks')
            ->where('run.start_time >= :from')
            ->andWhere('run.end_time < :to')
            ->groupBy('start_date,start_hour,run.env,run.app,run.spooler_name,run.alarm')
            ->setParameter('from', $from)
            ->setParameter('to', $to);
        $query=$qb->getQuery();
        print $query->getSQL();
        exit();
        return $query->getResult();
*/
        $driver = $this->_em->getConnection()->getDriver()->getName();
        switch ($driver) {
            case 'oci8':
                $sql = "SELECT TRUNC(run.start_time) as start_date,EXTRACT(HOUR from run.start_time) as start_hour,run.env,run.app,run.spooler_name,run.alarm,count(run) as executions,count(run.alarm) as alarms,count(run.ack) as acks
                        FROM REPORT_RUN run
                        WHERE run.start_time >= :from
                        AND run.end_time < :to
                        GROUP BY TRUNC(run.start_time),EXTRACT(HOUR from run.start_time),run.env,run.app,run.spooler_name,run.alarm";

                $rsm = new ResultSetMapping();
                $rsm->addScalarResult('START_DATE', 'start_date');
                $rsm->addScalarResult('START_HOUR', 'start_hour');
                $rsm->addScalarResult('ENV', 'env');
                $rsm->addScalarResult('APP', 'app');
                $rsm->addScalarResult('SPOOLER_NAME', 'spooler_name');
                $rsm->addScalarResult('EXECUTIONS', 'executions');
                $rsm->addScalarResult('ALARMS', 'alarms');
                $rsm->addScalarResult('ACKS', 'acks');
                $query = $this->_em->createNativeQuery($sql, $rsm)
                        ->setParameter('from', $from )
                        ->setParameter('to', $to );
                return $query->getResult();
                break;
            default:
                return $this->createQueryBuilder('run')
                    ->Select('DATE(run.start_time) as start_date,HOUR(run.start_time) as start_hour,run.env,run.app,run.spooler_name,run.alarm,count(run) as executions,count(run.alarm) as alarms,count(run.ack) as acks')
                    ->where('run.start_time >= :from')
                    ->andWhere('run.end_time < :to')
                    ->groupBy('start_date,start_hour,run.env,run.app,run.spooler_name,run.alarm')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to)
                    ->getQuery()
                    ->getResult();
                break;
        }
   }
   
   public function findRunDays(\DateTime $time)
   {

/*
 * PB DOCTRINE/ORACLE
        return $this->createQueryBuilder('run')
            ->Select('Cast(run.start_time) as HIDDEN start_date,run.env,run.app,run.spooler_name,run.alarm,count(run) as executions,count(run.alarm) as alarms,count(run.ack) as acks')
            ->Where('run.start_time >= :time')
            ->groupBy('start_date,run.env,run.app,run.spooler_name,run.alarm')
            ->setParameter('time', $time)
            ->getQuery()
            ->getResult();
 */
        $driver = $this->_em->getConnection()->getDriver()->getName();
        switch ($driver) {
            case 'oci8':
                $sql = "SELECT TRUNC(run.start_time) as start_date,run.env,run.app,run.spooler_name,run.alarm,count(run) as executions,count(run.alarm) as alarms,count(run.ack) as acks
                        FROM REPORT_RUN run
                        WHERE run.start_time >= :time
                        GROUP BY TRUNC(run.start_time),run.env,run.app,run.spooler_name,run.alarm";

                $rsm = new ResultSetMapping();
                $rsm->addScalarResult('START_DATE', 'start_date');
                $rsm->addScalarResult('ENV', 'env');
                $rsm->addScalarResult('APP', 'app');
                $rsm->addScalarResult('SPOOLER_NAME', 'spooler_name');
                $rsm->addScalarResult('EXECUTIONS', 'executions');
                $rsm->addScalarResult('ALARMS', 'alarms');
                $rsm->addScalarResult('ACKS', 'acks');
                $query = $this->_em->createNativeQuery($sql, $rsm)
                        ->setParameter('time', $time );
                return $query->getResult();
                break;
            default:
                return $this->createQueryBuilder('run')
                    ->Select('MONTH(run.start_time) as mois,run.app,run.env,run.alarm,run.ack,count(run) as nb')
                    ->where('run.start_time > :time')
                    ->groupBy('mois,run.app,run.env,run.alarm,run.ack')
                    ->setParameter('time', $time)
                    ->getQuery()
                    ->getResult();
                break;
        }
   }
   
   public function findExecutions(\DateTime $time, $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('SUBSTRING(run.start_time,6,2) as mois,run.app,run.env,run.alarm,run.ack,count(run) as nb')
            ->where('run.start_time > :time')
            ->andWhere('run.env = :env')
            ->groupBy('mois,run.app,run.env,run.alarm,run.ack')
            ->setParameter('time', $time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }
   
   public function findExecutionsByMonth(\DateTime $start_time, \DateTime $end_time, $env='*', $app='*')
   {       
        if (($app=='*') and ($env=='*')) {       
            return $this->createQueryBuilder('run')
                ->Select('run.job_name,run.alarm,run.ack,run.ack_time,min(run.start_time) as start_time,max(run.end_time) as end_time,count(run) as times,max(run.alarm_time) as alarm_time')
                ->where('run.start_time >= :start_time')
                ->andWhere('run.end_time <= :end_time')
                ->andWhere('run.alarm is not null')
                ->groupBy('run.job_name,run.alarm,run.ack,run.ack_time')
                ->setParameter('start_time', $start_time)
                ->setParameter('end_time', $end_time)
                ->getQuery()
                ->getResult();
        }
        elseif ($env=='*') {        
            return $this->createQueryBuilder('run')
                ->Select('run.job_name,run.alarm,run.ack,run.ack_time,min(run.start_time) as start_time,max(run.end_time) as end_time,count(run) as times,max(run.alarm_time) as alarm_time')
                ->where('run.start_time >= :start_time')
                ->andWhere('run.end_time <= :end_time')
                ->andWhere('run.alarm is not null')
                ->andWhere('run.app = :app')
                ->groupBy('run.job_name,run.alarm,run.ack,run.ack_time')
                ->setParameter('start_time', $start_time)
                ->setParameter('end_time', $end_time)
                ->setParameter('app', $app)
                ->getQuery()
                ->getResult();
        }
        elseif ($app=='*') {   
            return $this->createQueryBuilder('run')
                ->Select('run.job_name,run.alarm,run.ack,run.ack_time,min(run.start_time) as start_time,max(run.end_time) as end_time,count(run) as times,max(run.alarm_time) as alarm_time')
                ->where('run.start_time >= :start_time')
                ->andWhere('run.end_time <= :end_time')
                ->andWhere('run.alarm is not null')
                ->andWhere('run.env = :env')
                ->groupBy('run.job_name,run.alarm,run.ack,run.ack_time')
                ->setParameter('start_time', $start_time)
                ->setParameter('end_time', $end_time)
                ->setParameter('env', $env)
                ->getQuery()
                ->getResult();
        }
        else {
            return $this->createQueryBuilder('run')
                ->Select('run.job_name,run.alarm,run.ack,max(run.ack_time) as ack_time,min(run.start_time) as start_time,max(run.end_time) as end_time,count(run) as times,max(run.alarm_time) as alarm_time')
                ->where('run.start_time >= :start_time')
                ->andWhere('run.end_time <= :end_time')
                ->andWhere('run.alarm is not null')
                ->andWhere('run.env = :env')
                ->andWhere('run.app = :app')
                ->groupBy('run.job_name,run.alarm,run.ack')
                ->setParameter('start_time', $start_time)
                ->setParameter('end_time', $end_time)
                ->setParameter('env', $env)
                ->setParameter('app', $app)
                ->getQuery()
                ->getResult();
        }
   }
   
   // trop long
   public function findExecutionsByMonth2(\DateTime $start_time, \DateTime $end_time, $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('job.app,run.job_name,run.alarm,min(run.alarm_time) as start_alarm,max(run.alarm_time) as end_alarm,count(run) as executions')
            ->leftJoin('Arii\ReportBundle\Entity\JOB','job',\Doctrine\ORM\Query\Expr\Join::WITH,'run.job = job.id')
            ->where('run.start_time >= :start_time')
            ->andWhere('run.start_time <= :end_time')
            ->andWhere('job.env = :env')
            ->andWhere('run.alarm is not null')
            ->groupBy('job.app,run.job_name,run.alarm')
            ->setParameter('start_time', $start_time)
            ->setParameter('end_time', $end_time)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }
   
   public function findExecutionsByMonthAndApp(\DateTime $start_time, \DateTime $end_time, $app='%', $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('run.job_name,run.alarm,run.ack,run.start_time,run.end_time,run.alarm,run_ack')
            ->where('run.start_time >= :start_time')
            ->andWhere('run.start_time <= :end_time')
            ->andWhere('run.env = :env')
            ->andWhere('run.app = :app')
            ->setParameter('start_time', $start_time)
            ->setParameter('end_time', $end_time)
            ->setParameter('app', $app)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }

   public function findExecutionsByDayAndApp(\DateTime $start_time, \DateTime $end_time, $app='%', $env='P')
   {
        return $this->createQueryBuilder('run')
            ->Select('run.job_name,run.alarm,run.ack,run.start_time,run.end_time,run.alarm,run_ack')
            ->where('run.start_time >= :start_time')
            ->andWhere('run.start_time <= :end_time')
            ->andWhere('run.env = :env')
            ->andWhere('run.app = :app')
            ->setParameter('start_time', $start_time)
            ->setParameter('end_time', $end_time)
            ->setParameter('app', $app)
            ->setParameter('env', $env)
            ->getQuery()
            ->getResult();
   }
 
   public function findMinDates()
   {
        return $this->createQueryBuilder('run')
            ->Select('run.job_name,MIN(run.start_time) as first_execution')
            ->groupBy('run.job_name')                
            ->getQuery()
            ->getResult();
   }

   public function findMaxDates()
   {
        return $this->createQueryBuilder('run')
            ->Select('run.job_name,MAX(run.start_time) as last_execution')
            ->groupBy('run.job_name')                
            ->getQuery()
            ->getResult();
   }

   public function findMinMaxDates()
   {
        return $this->createQueryBuilder('run')
            ->Select('run.spooler_name,run.job_name,MIN(run.start_time) as first_execution,MAX(run.start_time) as last_execution')
            ->groupBy('run.spooler_name,run.job_name')                
            ->getQuery()
            ->getResult();
   }
   
   public function findLastStart($spooler, $job, \DateTime $end_time)
   {
        return $this->createQueryBuilder('run')
            ->Select('run.spooler_name,run.job_name,run.start_time')
            ->where('run.start_time <= :end_time')
            ->andWhere('run.end_time is null')
            ->andWhere('run.job_name = :job')
            ->andWhere('run.spooler_name = :spooler')
            ->orderBy('run.start_time')
            ->setParameter('end_time', $end_time)
            ->setParameter('spooler', $spooler)
            ->setParameter('job', $job)
            ->getQuery()
            ->getResult();
   }

   public function UpdateAppEnv($jobs,$app,$env)
   {
        $qb = $this->createQueryBuilder('run');
        //création de l'expression OR
        $orModule = $qb->expr()->orx();
        $orModule->add($qb->expr()->isNull('run.app'));
        $orModule->add($qb->expr()->isNull('run.env'));

        $q = $qb->update('Arii\ReportBundle\Entity\RUN','run')
            ->set('run.env',$qb->expr()->literal($env))
            ->set('run.app',$qb->expr()->literal($app))
            ->where('run.job_name like :jobs')
            ->andWhere($orModule)
            ->setParameter('jobs', $jobs)   
            ->getQuery();    
        return $q->execute();
   }

   public function findLastBySpooler()
   {
        return $this->createQueryBuilder('run')
            ->Select('run.spooler_name,count(run) as nb,max(run.start_time) as last')
            ->groupBy('run.spooler_name')   
            ->orderBy('run.spooler_name')   
            ->getQuery()
            ->getResult();
   }   
   
   public function findRunsToMigrate(\DateTime $start, \DateTime $end)
   {
        return $this->createQueryBuilder('run')
            ->where('run.start_time >= :start')
            ->andWhere('run.start_time <= :end')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery()
            ->getResult();
   }

   public function findLast()
   {
        return $this->createQueryBuilder('run')
            ->Select('count(run) as NB,max(run.start_time) as lastUpdate')
            ->getQuery()
            ->getResult();
   }
   
}