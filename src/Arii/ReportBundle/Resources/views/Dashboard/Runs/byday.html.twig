{# src/Arii/JIDBundle/Resources/views/Default/history.html.twig #}
{% extends "AriiReportBundle::layout.html.twig" %}
{% block body %}
<script language="javascript">
var app="{{ appl }}",
    env="{{ env }}",
    job_class="{{ job_class }}",
    category="{{ category }}",
    day = {{ day }},
    month={{ month }},
    year={{ year }},
    day_past={{ day_past }};

dhtmlxEvent(window,"load",function(){     
    globalLayout = new dhtmlXLayoutObject(document.body,"3L");
    globalLayout.cells("a").setWidth(345);

    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/images/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    globalMenu = globalLayout.cells("a").attachMenu();

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('/images/') }}" );
    myRibbon.loadStruct("{{ url('json_Report_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );
    
    globalLayout.cells("a").hideHeader();
    
    // Graphique
    myTabbar = globalLayout.cells("a").attachTabbar();
    myTabbar.addTab("chart","{{ "Jobs" | trans }}","120px",null,true);
    myTabbar.addTab("list","{{ "Applications" | trans }}","120px");
            
    // Graphique
    donutChart =  myTabbar.cells("chart").attachChart({
        view:"barH",
        padding: {
            left:100
        },
        value:"#alarms#",
        label:"",
        tooltip: "#application#: #alarms#",
        gradient:true,
        border:false,
        pieOuterText: "#alarms#",
        shadow: 0,
        xAxis:{
        },
        yAxis:{
                lines:true,
                template: "#application#",
                width: 200
        }
    });

    myApps = myTabbar.cells("list").attachGrid();
    myApps.selMultiRows = true;
    myApps.setImagePath( "{{ asset('/images/') }}");
    myApps.setHeader("{{ "Application" | trans }}");
    myApps.attachHeader("#text_filter");
    myApps.setColAlign("left");
    myApps.setColTypes("ro");
    myApps.setColSorting("str");
    myApps.init();

    myToolbar = globalLayout.cells("b").attachToolbar();
    myToolbar.setIconsPath("{{ asset('/toolbar/') }}");
    myToolbar.loadStruct("{{ url('xml_Report_toolbar') }}", function() {
        this.setItemText("APP",this.getListOptionText("APP",this.getListOptionSelected("APP")));
        this.setItemText("ENV",this.getListOptionText("ENV",this.getListOptionSelected("ENV")));
        this.setItemText("DAY_PAST",this.getListOptionText("DAY_PAST",this.getListOptionSelected("DAY_PAST")));
        this.setItemText("MONTH",this.getListOptionText("MONTH",this.getListOptionSelected("MONTH")));
    });
    myToolbar.attachEvent( "onClick", function(id, value) {
        var parent=this.getParentId(id);
        switch (parent) {
            case "APP":
                this.setItemText("APP",this.getListOptionText("APP",this.getListOptionSelected("APP")));
                app = id;
                GlobalRefresh();
                break;
            case "ENV":
                this.setItemText("ENV",this.getListOptionText("ENV",this.getListOptionSelected("ENV")));
                env = id;
                GlobalRefresh();
                break;
            case "MONTH":
                this.setItemText("MONTH",this.getListOptionText("MONTH",this.getListOptionSelected("MONTH")));
                month = id;
                GlobalRefresh();
                break;
            case "DAY_PAST":
                this.setItemText("DAY_PAST",this.getListOptionText("DAY_PAST",this.getListOptionSelected("DAY_PAST")));
                day_past = id;
                GlobalRefresh();
                break;
            case "YEAR":
                this.setItemText("YEAR",this.getListOptionText("YEAR",this.getListOptionSelected("YEAR")));
                year = id;
                GlobalRefresh();
                break;
            default:
//                alert(id);
                GlobalRefresh();
        }
    });

    myTabs = globalLayout.cells("b").attachTabbar();
    myTabs.addTab("event","{{ "Events" | trans }}","150px",null,true);
    myTabs.addTab("exec","{{ "Runs" | trans }}","150px");
    myTabs.addTab("alarms","{{ "Alarms" | trans }}","150px");
    myTabs.addTab("applications","{{ "Applications" | trans }}","150px");
    
    barChart =  myTabs.cells("exec").attachChart({
        view: "bar",
        value:"#executions#",
        color:"#00cccc",
        label:"#executions#",
        seriesPadding: 0, 
        seriesMargin: 0,
        gradient:true,
        border:false,    
        width: 50,
        yAxis:{
        },
        xAxis:{
                lines:true,
                template: "#mois#",
                title:"{{ "Months" | trans }}",
                margin: { 
                    left: 200
                }
        },
        legend:{
                values:[{text:"{{ "Runs" | trans }}",color:"#00cccc"}],
                valign:"top",
                align:"left",
                width:100,
                layout:"x"
        }
    });

    barChart2 =  myTabs.cells("alarms").attachChart({
        view: "area",
        color: "#ff0000",
        alpha: 0.6,
        value: function (obj) { return obj.alarms },
        label: function (obj) {
            if (obj.alarms>1) 
                return obj.alarms+' {{ "Alarms" | trans }}';
            else if (obj.alarms>0) 
                return obj.alarms+' {{ "Alarms" | trans }}';
            else return;
        },
        seriesPadding: 0, 
        seriesMargin: 0,
        gradient:true,
        border:false,    
        width: 50,
        yAxis:{
        },
        xAxis:{
                lines:true,
                template: "#mois#",
                title:"{{ "Months" | trans }}",
                margin: { 
                    left: 200
                }
        },
        legend:{
                values:[{text:"{{ "Alarms" | trans }}",color:"#FF0000"},{text:"{{ "Jira" | trans }}",color:"#00FF00"}],
                valign:"top",
                align:"left",
                width:100,
                layout:"x"
        }
    });

    barChart2.addSeries({
        view: "line",
        value:  function (obj) { return obj.acks },
        item: {
            color:"#00ff00",
            borderColor:"#ffffff",
            width:5
        },
        line:{
            color:"#00ff00",
            width:3
        },
        label: function (obj) {
            if (obj.acks>1) 
                return obj.acks+' {{ "Jira" | trans }}';
            else if (obj.acks>0) 
                return obj.acks+' {{ "Jiras" | trans }}';
            else return;
        }
    });

    scatterChart =  myTabs.cells("event").attachChart({
        view: "scatter",
        xValue:"#day#",
        yValue:"#hour#",
        color:"#00cccc",
        preset: 'diamond',
        label: '#event#',
        item:{
               borderColor:"#ffffff",
               color: 'red',
               alpha: 0.2,
               radius: function (obj) {
                    return obj.events*15;
               }
           },
        legend:{
            values:[
                { text: "{{ "Alarms" | trans }}", color:"yellow" },
                { text: "{{ "Events" | trans }}",color:"red" },
                { text: "{{ "Acks" | trans }}",color:"orange"}
            ],
            valign:"middle",
            width:90,
            layout:"x"
        },
        xAxis:{
                lines:true,
                title:"{{ "Day" | trans }}",
                margin: { 
                    left: 200
                },
                start: 1,
                end: 31,
                step: 1
        },
        yAxis:{
                lines:true,
                title:"{{ "Hour" | trans }}",
                margin: { 
                    left: 200
                },
                start: 0,
                end: 24,
                step: 1
        }        
    });
    
    scatterChart.addSeries({
        view: "scatter",
        xValue:"#day#",
        yValue:"#hour#",
        color:"#00cccc",
        label: '',  
        preset: 'round',        
        item:{
               borderColor:"#ffffff",
               color: 'yellow',
               alpha: 0.4,               
               radius: function (obj) {
                    return obj.alarms;
                }
        }        
    });

    scatterChart.addSeries({
        view: "scatter",
        xValue:"#day#",
        yValue:"#hour#",
        color:"#00cccc",
        label: '',
        tooltip: '#acks#',
        preset: 'round',      
        item:{
               borderColor:"#ffffff",
               color: 'orange',
               type: 's',
               alpha: 0.8,               
               radius: function (obj) {
                    return obj.acks;
                }
        }        
    });

    stackedChart =  myTabs.cells("applications").attachChart({
        view:"stackedBar",
        value: "#executions#",
        label: "#applications#",
        color: "#applications#",
        xAxis:{
            template:"{obj}",
            title:"Date"
        },
        yAxis:{
            title:"Jobs",
            template:"#executions#"
        }
    });
    
    rowArr = []; // array of grid rows
    newArr = []; // main array for chart
    grid.load("{{ url('xml_Report_runs_applications_chart') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past ,function(){
        rows = grid.getRowsNum();
        columns = grid.getColumnCount();
        for (var c=0; c<columns; c++){ // c - columns
           colName = grid.getColLabel(c);
           rowArr.push(colName); // add column label in array
           for (var r=0; r<rows; r++){ // r - rows
              newVal = grid.cellByIndex(r,c).getValue();
              rowArr.push(newVal); // create data for column bar
           }
           newArr.push(rowArr); // create main array
           rowArr = [];
        };
        for (var s=1; s<=rows; s++){ // s - series
            stackedChart.addSeries({ value:"#data"+(s+1)+"#", color:"#a7ee70", label:"#data"+(s+1)+"#" 
            }); // do not forget to manipulate data color any custom way
        }
    });

    myRuns = globalLayout.cells("c").attachGrid();
    globalLayout.cells("c").setText("{{ "Runs" | trans }}");
    globalLayout.cells("c").collapse();
    
    myRuns.selMultiRows = true;
    myRuns.setImagePath( "{{ asset('/images/') }}");
    myRuns.setHeader("{{ "Job" | trans }},{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Count" | trans }},{{ "Alarm" | trans }},{{ "Alarm time" | trans }},{{ "Ack" | trans }},{{ "Ack time" | trans }}");
    myRuns.attachHeader("#text_filter,#text_filter,#text_filter,#numeric_filter,#select_filter,#text_filter,#text_filter,#text_filter");
    myRuns.setColAlign("left,left,left,right,left,left,left,left");
    myRuns.setInitWidths( "*,140,140,100,140,140,150,140" );    
    myRuns.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro");
    myRuns.setColSorting("str,date,date,int,str,date,str,date");
    myRuns.init();
    
    donutChart.attachEvent("onItemClick",function(id){ 
        dhx4.ajax.get( "{{ url('arii_session_update') }}?app="+id, function() {
            myRibbon.setItemText( "app", id );
            GlobalRefresh();
        });
    });
    myApps.attachEvent("onRowSelect",function(id){ 
        Application(id); 
    });
    myRuns.attachEvent("onRowSelect",function(id){ 
        jira = this.cells(id,6).getValue();
        if (jira=='') {
            dhtmlx.message({
                type: "Notice",
                expire: 5000,
                width: "500px",
                text: "{{ "No jira !" | trans }}" });
                return false;
        }
        window.open("https://di.vaudoise.ch/browse/"+jira);
        return true;
    });    
    barChart.attachEvent("onItemClick",function(id, event){
       var status = (event.target||event.srcElement);
       Execution(id,status);
    });
    barChart.attachEvent("onMouseMoving",function(e){
       var target = (e.target||e.srcElement);
          document.body.style.cursor = (target.tagName == "AREA"?"pointer":"default");
    })
    
    GlobalRefresh();
});

function GlobalRefresh() {
    globalLayout.cells("a").progressOn();
    globalLayout.cells("b").progressOn();
    globalLayout.cells("c").collapse();
    barChart.clearAll();
    barChart.load( "{{ url('xml_Report_runs_status_chart') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function() {
        // barChart2.parse(barChart, 'dhtmlxgrid');
        barChart2.load( "{{ url('xml_Report_runs_status_chart') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function() {
            scatterChart.clearAll();
            scatterChart.load( "{{ url('xml_Report_runs_status_hour_chart') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function() {
                globalLayout.cells("b").progressOff();
                donutChart.clearAll();
                donutChart.load( "{{ url('xml_Report_runs_alarms_chart') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function() {
                    myApps.load( "{{ url('xml_Report_apps_grid') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function() {
                        globalLayout.cells("a").progressOff();
                        myRibbon.loadStruct("{{ url('json_Report_ribbon') }}?app="+app+"&env="+env+"&month="+month+"&year="+year+"&day_past="+day_past, function () {                    
                        });                
                    });
               });
           });
        });
    });
};

function Application(id) {
    globalLayout.cells("b").setText(id);
    globalLayout.cells("b").progressOn();
    barChart.clearAll();
    app = id;
    barChart.load( "{{ url('xml_Report_runs_status_chart') }}?app="+app, function() {
        globalLayout.cells("b").progressOff();
    });
}

function Execution(id) {
    globalLayout.cells("c").expand();
    globalLayout.cells("c").progressOn();
    myRuns.clearAll();
    myRuns.load("{{ url('xml_Report_runs_jobs') }}?scope="+id, function () {
        globalLayout.cells("c").progressOff();
    });
}
</script>
{% endblock %}
