<?php

namespace Arii\SelfBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RequestRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('created' => 'DESC'));
    }
    
    public function findRequests()
    {
        $query = $this->createQueryBuilder('job')
            ->Select('job.*')
            ->orderBy('job.title');        
            return $query->getQuery()
                    ->getResult();
    }

    public function findTodo()
    {
        $query = $this->createQueryBuilder('req')
            ->Select('req')
            ->Where('req.processed is NULL')
            ->orderBy('req.created');
        return $query->getQuery()
                    ->getResult();
    }   

    public function findByStatus($status='FAILURE')
    {
        $query = $this->createQueryBuilder('e')
            ->Select('e')
            ->Where('e.req_status = :status')
            ->setParameter('status',$status)
            ->orderBy('e.created,e.planned,e.processed','DESC ');
            return $query->getQuery()
                    ->getResult();
    }
    
    public function findProcessed($name)
    {
        $query = $this->createQueryBuilder('job')
            ->Select('job')
            ->where('job.name = :name')
            ->andWhere('job.processed IS NOT NULL')
            ->setParameter('name',$name);
            return $query->getQuery()
                    ->getResult();
    }
 
    public function findAllProcessed()
    {
        $query = $this->createQueryBuilder('job')
            ->Select('job')
            ->Where('job.processed IS NOT NULL');
            return $query->getQuery()
                    ->getResult();
    }

    public function countStatus($status) {
        return $this->createQueryBuilder('e')
            ->select('COUNT(e)')
            ->Where('e.req_status = :status')
            ->setParameter('status',$status)
            ->getQuery()
            ->getSingleScalarResult();
    }    
    
}
