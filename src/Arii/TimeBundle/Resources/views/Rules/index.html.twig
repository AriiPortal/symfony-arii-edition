{% extends "AriiTimeBundle::layout.html.twig" %}
{% block body %}
<div style="display: none;">
<div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:100%;'>
<div class="dhx_cal_navline">
<div class="dhx_cal_prev_button">&nbsp;</div>
<div class="dhx_cal_next_button">&nbsp;</div>
<div class="dhx_cal_today_button"></div>
<div class="dhx_cal_date"></div>
<div class="dhx_cal_tab" name="day_tab" style="right:205px;"></div>
<div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
<div class="dhx_cal_tab" name="month_tab" style="right:75px;"></div>
<div class="dhx_cal_tab" name="year_tab" style="right:10px;"></div>
<div class="dhx_cal_tab" name="agenda_tab" style="right:250px;"></div>
</div>
<div class="dhx_cal_header">
</div>
<div class="dhx_cal_data">
</div>	
</div>
</div>
<script charset="utf-8">
function Init() {
    
    myLayout = globalLayout.cells("b").attachLayout("3U");
    
    // Liste des jours 
    dhxGrid = myLayout.cells("a").attachGrid();
    dhxGrid.setImagePath( "{{ asset('/images/') }}");
    dhxGrid.setHeader("{{ "Name" | trans }},{{ "Description" | trans }}");
    dhxGrid.setHeader("#text_filter,#text_filter");
    dhxGrid.setInitWidths("180,*");
    dhxGrid.setColAlign("left,left");
    dhxGrid.setColTypes("ro,ro");
    dhxGrid.setColSorting("str,str");
    dhxGrid.init();
    dhxGrid.load("{{ url('xml_Time_rules') }}");
    dhxGrid.attachEvent("onRowDblClicked", Detail );
    
    // Calendrier
    //scheduler.locale.labels.section_custom="Section";
    scheduler.config.details_on_create=false;
    scheduler.config.details_on_dblclick=false;
    scheduler.config.server_utc = false; 
    scheduler.config.xml_date="%Y-%m-%d %H:%i";

    scheduler.config.first_hour = 0;
    scheduler.config.last_hour = 24;
/*
    scheduler.locale.labels.day_tab = "{{ "Day" | trans }}";
    scheduler.locale.labels.month_tab = "{{ "Month" | trans }}";
    scheduler.locale.labels.week_tab = "{{ "Week" | trans }}";
    scheduler.locale.labels.year_tab = "{{ "Year" | trans }}";
    scheduler.locale.labels.agenda_tab = "{{ "Agenda" | trans }}";
*/
    scheduler.config.multi_day = true;

    scheduler.config.year_x = 4; //2 months in a row
    scheduler.config.year_y = 3; //3 months in a column
    //===============
    //Data loading
    //===============
    scheduler.config.lightbox.sections=[	
        { name:"description", height:130, map_to:"text", type:"textarea" , focus:true},
        { name:"time", height:72, type:"time", map_to:"auto"}
     ];

    scheduler.templates.event_class=function(start,end,event){
        return event.color;
    }

    scheduler.config.readonly = true;
    scheduler.init('scheduler_here',null, "month");	

//    scheduler.load( "{ { url('xml_Time_calendar') }}" );
    timeline  = myLayout.cells("b").attachScheduler( new Date() , 'year', 'scheduler_here', scheduler);

    scheduler.attachEvent("onClick",function(id, value){
        alert(id);
    });

    var detailLayout = myLayout.cells("c").attachLayout("2U");
    detailLayout.cells("a").setHeight(300); 
    detailLayout.cells("b").setWidth(350); 
    detailLayout.cells("a").hideHeader();     
    detailLayout.cells("b").hideHeader();

    myGridToolbar = detailLayout.cells("a").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('/images/') }}");
    myGridToolbar.loadStruct( "{{ url('xml_Time_rules_toolbar') }}");

   formData = [
        { type: "settings", position: "label-left", labelWidth: 110, inputWidth: 300,labelAlign: "right",noteWidth: 200 },
        {type: "hidden",name: "ID"},         
        { type: "input",
          name: "name",
          label: "{{ "Name"| trans }}",
          required: true
        },
        { type: "input",
          name: "title",
          label: "{{ "Title"| trans }}",
          required: true
        },
        { type: "input",
          name: "rule",
          label: "{{ "Rule"| trans }}",
          required: true
        },
        { type: "select",
          name: "zone_id",
          label: "{{ "Region"| trans }}",
          connector: "{{ url('xml_Time_zones_select') }}"                    
        },
        { type: "newcolumn" },
        { type: "input",
          rows: 3,
          name: "description",
          label: "{{ "Description"| trans }}"
        },
        { type: "input",
          readonly: true,
          name: "updated",
          label: "{{ "Updated"| trans }}"
        }    
    ];
    myForm = detailLayout.cells("a").attachForm(formData);

    dhxTest = detailLayout.cells("b").attachGrid();
    dhxTest.setImagePath( "{{ asset('/images/') }}");
    // dhxTest.setHeader("{{ "Name" | trans }}");
    dhxTest.setHeader("#text_filter");
    dhxTest.setInitWidths("*");
    dhxTest.setColAlign("right");
    dhxTest.setColTypes("ro");
    dhxTest.setColSorting("date");
    dhxTest.init();

    myGridToolbar.attachEvent("onClick",function(itemid){
         switch (itemid) {
            case 'calculate':                
                Detail(myForm.getItemValue('rule'));
                break;
            case 'save':
                myForm.send("{{ url('xml_Time_rule_save') }}","POST",function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                });
                break;
            default:
                alert(itemid);
                break;
        }
    });

}

function Detail(id) {
    myLayout.cells("c").progressOn();
    myForm.load("{{ url('xml_Time_rules_form') }}?id="+id, function(){    
        dhxTest.clearAndLoad("{{ url('xml_Time_rule_test') }}?rule="+ encodeURIComponent(myForm.getItemValue('rule')), function () {
            scheduler.load("{{ url('xml_Time_rule_test_schedule') }}?rule="+ encodeURIComponent(myForm.getItemValue('rule')));
            myLayout.cells("c").progressOff();
        });
    });    
}
</script>
{% endblock %}